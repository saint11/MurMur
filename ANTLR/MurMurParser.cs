//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MurMurParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class MurMurParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, NEWLINE=2, LINE_COMMENT=3, TAG_START=4, COMMAND_START=5, 
		FAST_PICK_START=6, GOTO_START=7, TEXT=8, COMMAND_PARAMS_START=9, COMMAND_STRING_START=10, 
		COMMAND_PARAMS_SEPARATOR=11, VARIABLE_START=12, COMMAND_END=13, KEYWORD_IF=14, 
		KEYWORD_END=15, KEYWORD_GOTO=16, KEYWORD_MENU=17, KEYWORD_PICK=18, KEYWORD_PICK_THIS=19, 
		WORD=20, NUMBER=21, INT=22, COMPARISSON_SIGNAL=23, OPERATION_SIGNAL=24, 
		SUB_TEXT_SEPARATOR=25, FAST_PICK_TEXT=26, FAST_PICK_END=27, STRING=28, 
		COMMAND_STRING_END=29;
	public const int
		RULE_murmur = 0, RULE_tag = 1, RULE_block = 2, RULE_text = 3, RULE_fastPickBlock = 4, 
		RULE_pickBlock = 5, RULE_command = 6, RULE_params = 7, RULE_expression = 8, 
		RULE_variable = 9, RULE_commandId = 10, RULE_pickCommand = 11, RULE_pickThisCommand = 12, 
		RULE_menuCommand = 13, RULE_ifCommand = 14, RULE_endCommand = 15;
	public static readonly string[] ruleNames = {
		"murmur", "tag", "block", "text", "fastPickBlock", "pickBlock", "command", 
		"params", "expression", "variable", "commandId", "pickCommand", "pickThisCommand", 
		"menuCommand", "ifCommand", "endCommand"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "NEWLINE", "LINE_COMMENT", "TAG_START", "COMMAND_START", 
		"FAST_PICK_START", "GOTO_START", "TEXT", "COMMAND_PARAMS_START", "COMMAND_STRING_START", 
		"COMMAND_PARAMS_SEPARATOR", "VARIABLE_START", "COMMAND_END", "KEYWORD_IF", 
		"KEYWORD_END", "KEYWORD_GOTO", "KEYWORD_MENU", "KEYWORD_PICK", "KEYWORD_PICK_THIS", 
		"WORD", "NUMBER", "INT", "COMPARISSON_SIGNAL", "OPERATION_SIGNAL", "SUB_TEXT_SEPARATOR", 
		"FAST_PICK_TEXT", "FAST_PICK_END", "STRING", "COMMAND_STRING_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MurMurParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MurMurParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MurMurParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MurMurParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MurmurContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public TagContext[] tag() {
			return GetRuleContexts<TagContext>();
		}
		public TagContext tag(int i) {
			return GetRuleContext<TagContext>(i);
		}
		public MurmurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_murmur; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMurmur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMurmur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMurmur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MurmurContext murmur() {
		MurmurContext _localctx = new MurmurContext(Context, State);
		EnterRule(_localctx, 0, RULE_murmur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32; tag();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TAG_START );
			State = 37; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public ITerminalNode TAG_START() { return GetToken(MurMurParser.TAG_START, 0); }
		public ITerminalNode TEXT() { return GetToken(MurMurParser.TEXT, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 2, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(TAG_START);
			State = 40; Match(TEXT);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 41; Match(NEWLINE);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 47; block();
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMAND_START) | (1L << FAST_PICK_START) | (1L << TEXT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public PickCommandContext[] pickCommand() {
			return GetRuleContexts<PickCommandContext>();
		}
		public PickCommandContext pickCommand(int i) {
			return GetRuleContext<PickCommandContext>(i);
		}
		public EndCommandContext[] endCommand() {
			return GetRuleContexts<EndCommandContext>();
		}
		public EndCommandContext endCommand(int i) {
			return GetRuleContext<EndCommandContext>(i);
		}
		public MenuCommandContext[] menuCommand() {
			return GetRuleContexts<MenuCommandContext>();
		}
		public MenuCommandContext menuCommand(int i) {
			return GetRuleContext<MenuCommandContext>(i);
		}
		public IfCommandContext[] ifCommand() {
			return GetRuleContexts<IfCommandContext>();
		}
		public IfCommandContext ifCommand(int i) {
			return GetRuleContext<IfCommandContext>(i);
		}
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public PickBlockContext[] pickBlock() {
			return GetRuleContexts<PickBlockContext>();
		}
		public PickBlockContext pickBlock(int i) {
			return GetRuleContext<PickBlockContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 100;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						State = 53;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 52; text();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 55;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 2:
						{
						State = 57; pickCommand();
						State = 61;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NEWLINE) {
							{
							{
							State = 58; Match(NEWLINE);
							}
							}
							State = 63;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 65;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 64; pickBlock();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 67;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 69; endCommand();
						}
						break;
					case 3:
						{
						State = 71; menuCommand();
						State = 75;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NEWLINE) {
							{
							{
							State = 72; Match(NEWLINE);
							}
							}
							State = 77;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 79;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 78; block();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 81;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 83; endCommand();
						}
						break;
					case 4:
						{
						State = 85; ifCommand();
						State = 89;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NEWLINE) {
							{
							{
							State = 86; Match(NEWLINE);
							}
							}
							State = 91;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 93;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 92; block();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 95;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 97; endCommand();
						}
						break;
					case 5:
						{
						State = 99; command();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 104; Match(NEWLINE);
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(MurMurParser.TEXT, 0); }
		public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public FastPickBlockContext fastPickBlock() {
			return GetRuleContext<FastPickBlockContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 6, RULE_text);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(TEXT);
				}
				break;
			case COMMAND_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; ifCommand();
				State = 112; text();
				State = 113; endCommand();
				}
				break;
			case FAST_PICK_START:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115; fastPickBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FastPickBlockContext : ParserRuleContext {
		public ITerminalNode FAST_PICK_START() { return GetToken(MurMurParser.FAST_PICK_START, 0); }
		public ITerminalNode[] FAST_PICK_TEXT() { return GetTokens(MurMurParser.FAST_PICK_TEXT); }
		public ITerminalNode FAST_PICK_TEXT(int i) {
			return GetToken(MurMurParser.FAST_PICK_TEXT, i);
		}
		public ITerminalNode FAST_PICK_END() { return GetToken(MurMurParser.FAST_PICK_END, 0); }
		public ITerminalNode[] SUB_TEXT_SEPARATOR() { return GetTokens(MurMurParser.SUB_TEXT_SEPARATOR); }
		public ITerminalNode SUB_TEXT_SEPARATOR(int i) {
			return GetToken(MurMurParser.SUB_TEXT_SEPARATOR, i);
		}
		public FastPickBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fastPickBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterFastPickBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitFastPickBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFastPickBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FastPickBlockContext fastPickBlock() {
		FastPickBlockContext _localctx = new FastPickBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_fastPickBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(FAST_PICK_START);
			State = 119; Match(FAST_PICK_TEXT);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SUB_TEXT_SEPARATOR) {
				{
				{
				State = 120; Match(SUB_TEXT_SEPARATOR);
				State = 121; Match(FAST_PICK_TEXT);
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127; Match(FAST_PICK_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickBlockContext : ParserRuleContext {
		public PickThisCommandContext pickThisCommand() {
			return GetRuleContext<PickThisCommandContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public PickBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickBlockContext pickBlock() {
		PickBlockContext _localctx = new PickBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_pickBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; pickThisCommand();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 130; Match(NEWLINE);
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 136; block();
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public CommandIdContext commandId() {
			return GetRuleContext<CommandIdContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(COMMAND_START);
			State = 143; commandId();
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_PARAMS_START) {
				{
				State = 144; Match(COMMAND_PARAMS_START);
				State = 145; @params();
				}
			}

			State = 148; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMAND_PARAMS_SEPARATOR() { return GetTokens(MurMurParser.COMMAND_PARAMS_SEPARATOR); }
		public ITerminalNode COMMAND_PARAMS_SEPARATOR(int i) {
			return GetToken(MurMurParser.COMMAND_PARAMS_SEPARATOR, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 14, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; expression(0);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMAND_PARAMS_SEPARATOR) {
				{
				{
				State = 151; Match(COMMAND_PARAMS_SEPARATOR);
				State = 152; expression(0);
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(MurMurParser.INT, 0); }
		public ITerminalNode NUMBER() { return GetToken(MurMurParser.NUMBER, 0); }
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public ITerminalNode STRING() { return GetToken(MurMurParser.STRING, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATION_SIGNAL() { return GetToken(MurMurParser.OPERATION_SIGNAL, 0); }
		public ITerminalNode COMPARISSON_SIGNAL() { return GetToken(MurMurParser.COMPARISSON_SIGNAL, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				State = 159; Match(INT);
				}
				break;
			case NUMBER:
				{
				State = 160; Match(NUMBER);
				}
				break;
			case WORD:
				{
				State = 161; Match(WORD);
				}
				break;
			case STRING:
				{
				State = 162; Match(STRING);
				}
				break;
			case VARIABLE_START:
				{
				State = 163; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 172;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 166;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 167; Match(OPERATION_SIGNAL);
						State = 168; expression(3);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 169;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 170; Match(COMPARISSON_SIGNAL);
						State = 171; expression(2);
						}
						break;
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE_START() { return GetToken(MurMurParser.VARIABLE_START, 0); }
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(VARIABLE_START);
			State = 178; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandIdContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public CommandIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterCommandId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitCommandId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandIdContext commandId() {
		CommandIdContext _localctx = new CommandIdContext(Context, State);
		EnterRule(_localctx, 20, RULE_commandId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_PICK() { return GetToken(MurMurParser.KEYWORD_PICK, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public PickCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickCommandContext pickCommand() {
		PickCommandContext _localctx = new PickCommandContext(Context, State);
		EnterRule(_localctx, 22, RULE_pickCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(COMMAND_START);
			State = 183; Match(KEYWORD_PICK);
			State = 184; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickThisCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_PICK_THIS() { return GetToken(MurMurParser.KEYWORD_PICK_THIS, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ITerminalNode NUMBER() { return GetToken(MurMurParser.NUMBER, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public PickThisCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickThisCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickThisCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickThisCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickThisCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickThisCommandContext pickThisCommand() {
		PickThisCommandContext _localctx = new PickThisCommandContext(Context, State);
		EnterRule(_localctx, 24, RULE_pickThisCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(COMMAND_START);
			State = 187; Match(KEYWORD_PICK_THIS);
			State = 188; Match(COMMAND_PARAMS_START);
			State = 189; Match(NUMBER);
			State = 190; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_MENU() { return GetToken(MurMurParser.KEYWORD_MENU, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MenuCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuCommandContext menuCommand() {
		MenuCommandContext _localctx = new MenuCommandContext(Context, State);
		EnterRule(_localctx, 26, RULE_menuCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(COMMAND_START);
			State = 193; Match(KEYWORD_MENU);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_PARAMS_START) {
				{
				State = 194; Match(COMMAND_PARAMS_START);
				State = 195; expression(0);
				}
			}

			State = 198; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_IF() { return GetToken(MurMurParser.KEYWORD_IF, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterIfCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitIfCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(COMMAND_START);
			State = 201; Match(KEYWORD_IF);
			State = 202; Match(COMMAND_PARAMS_START);
			State = 203; expression(0);
			State = 204; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_END() { return GetToken(MurMurParser.KEYWORD_END, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public EndCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterEndCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitEndCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndCommandContext endCommand() {
		EndCommandContext _localctx = new EndCommandContext(Context, State);
		EnterRule(_localctx, 30, RULE_endCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(COMMAND_START);
			State = 207; Match(KEYWORD_END);
			State = 208; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\xD5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x6', '\x2', '$', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '%', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '-', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x30', '\v', '\x3', '\x3', '\x3', '\x6', '\x3', '\x33', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\x34', '\x3', '\x4', '\x6', '\x4', 
		'\x38', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x39', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '>', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x41', '\v', '\x4', '\x3', '\x4', '\x6', '\x4', '\x44', '\n', '\x4', 
		'\r', '\x4', '\xE', '\x4', '\x45', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', 'L', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', 'O', '\v', '\x4', '\x3', '\x4', '\x6', '\x4', 'R', '\n', '\x4', 
		'\r', '\x4', '\xE', '\x4', 'S', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', 'Z', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		']', '\v', '\x4', '\x3', '\x4', '\x6', '\x4', '`', '\n', '\x4', '\r', 
		'\x4', '\xE', '\x4', '\x61', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x6', '\x4', 'g', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 'h', '\x3', 
		'\x4', '\a', '\x4', 'l', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'o', 
		'\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'w', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '}', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', '\x80', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '\x86', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\x89', '\v', '\a', '\x3', '\a', '\a', '\a', '\x8C', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x8F', '\v', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x95', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x9C', '\n', '\t', '\f', '\t', '\xE', '\t', '\x9F', '\v', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\xA7', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xAF', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\xB2', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xC7', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x2', '\x3', '\x12', '\x12', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\x2', '\x2', '\x2', '\xE2', '\x2', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', '\x2', '\x6', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'v', '\x3', '\x2', '\x2', '\x2', '\n', 'x', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x90', '\x3', '\x2', '\x2', '\x2', '\x10', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xD0', '\x3', '\x2', '\x2', '\x2', '\"', 
		'$', '\x5', '\x4', '\x3', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\a', '\x2', '\x2', '\x3', '(', '\x3', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\a', '\x6', '\x2', '\x2', '*', '.', '\a', '\n', 
		'\x2', '\x2', '+', '-', '\a', '\x4', '\x2', '\x2', ',', '+', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x33', '\x5', '\x6', '\x4', '\x2', '\x32', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x5', '\b', '\x5', 
		'\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x3', '\x2', '\x2', '\x2', ':', 'g', '\x3', '\x2', '\x2', '\x2', 
		';', '?', '\x5', '\x18', '\r', '\x2', '<', '>', '\a', '\x4', '\x2', '\x2', 
		'=', '<', '\x3', '\x2', '\x2', '\x2', '>', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x44', '\x5', '\f', '\a', '\x2', '\x43', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x5', 
		' ', '\x11', '\x2', 'H', 'g', '\x3', '\x2', '\x2', '\x2', 'I', 'M', '\x5', 
		'\x1C', '\xF', '\x2', 'J', 'L', '\a', '\x4', '\x2', '\x2', 'K', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x5', 
		'\x6', '\x4', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x5', 
		' ', '\x11', '\x2', 'V', 'g', '\x3', '\x2', '\x2', '\x2', 'W', '[', '\x5', 
		'\x1E', '\x10', '\x2', 'X', 'Z', '\a', '\x4', '\x2', '\x2', 'Y', 'X', 
		'\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 
		'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', 
		'\x2', '^', '`', '\x5', '\x6', '\x4', '\x2', '_', '^', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x5', ' ', '\x11', '\x2', 
		'\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x5', '\xE', '\b', 
		'\x2', '\x66', '\x37', '\x3', '\x2', '\x2', '\x2', '\x66', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'I', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'l', '\a', '\x4', '\x2', '\x2', 'k', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'w', '\a', 
		'\n', '\x2', '\x2', 'q', 'r', '\x5', '\x1E', '\x10', '\x2', 'r', 's', 
		'\x5', '\b', '\x5', '\x2', 's', 't', '\x5', ' ', '\x11', '\x2', 't', 'w', 
		'\x3', '\x2', '\x2', '\x2', 'u', 'w', '\x5', '\n', '\x6', '\x2', 'v', 
		'p', '\x3', '\x2', '\x2', '\x2', 'v', 'q', '\x3', '\x2', '\x2', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '\b', '\x2', '\x2', 'y', '~', '\a', '\x1C', '\x2', 
		'\x2', 'z', '{', '\a', '\x1B', '\x2', '\x2', '{', '}', '\a', '\x1C', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x81', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\x1D', '\x2', 
		'\x2', '\x82', '\v', '\x3', '\x2', '\x2', '\x2', '\x83', '\x87', '\x5', 
		'\x1A', '\xE', '\x2', '\x84', '\x86', '\a', '\x4', '\x2', '\x2', '\x85', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x6', '\x4', 
		'\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', 
		'\a', '\x2', '\x2', '\x91', '\x94', '\x5', '\x16', '\f', '\x2', '\x92', 
		'\x93', '\a', '\v', '\x2', '\x2', '\x93', '\x95', '\x5', '\x10', '\t', 
		'\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\a', '\xF', '\x2', '\x2', '\x97', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x9D', '\x5', '\x12', '\n', '\x2', '\x99', '\x9A', '\a', 
		'\r', '\x2', '\x2', '\x9A', '\x9C', '\x5', '\x12', '\n', '\x2', '\x9B', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x11', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\b', '\n', '\x1', 
		'\x2', '\xA1', '\xA7', '\a', '\x18', '\x2', '\x2', '\xA2', '\xA7', '\a', 
		'\x17', '\x2', '\x2', '\xA3', '\xA7', '\a', '\x16', '\x2', '\x2', '\xA4', 
		'\xA7', '\a', '\x1E', '\x2', '\x2', '\xA5', '\xA7', '\x5', '\x14', '\v', 
		'\x2', '\xA6', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\f', 
		'\x4', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x1A', '\x2', '\x2', '\xAA', 
		'\xAF', '\x5', '\x12', '\n', '\x5', '\xAB', '\xAC', '\f', '\x3', '\x2', 
		'\x2', '\xAC', '\xAD', '\a', '\x19', '\x2', '\x2', '\xAD', '\xAF', '\x5', 
		'\x12', '\n', '\x4', '\xAE', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\xE', '\x2', 
		'\x2', '\xB4', '\xB5', '\a', '\x16', '\x2', '\x2', '\xB5', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x16', '\x2', '\x2', '\xB7', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\a', '\x2', 
		'\x2', '\xB9', '\xBA', '\a', '\x14', '\x2', '\x2', '\xBA', '\xBB', '\a', 
		'\xF', '\x2', '\x2', '\xBB', '\x19', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\a', '\a', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x15', '\x2', 
		'\x2', '\xBE', '\xBF', '\a', '\v', '\x2', '\x2', '\xBF', '\xC0', '\a', 
		'\x17', '\x2', '\x2', '\xC0', '\xC1', '\a', '\xF', '\x2', '\x2', '\xC1', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', '\a', '\x2', 
		'\x2', '\xC3', '\xC6', '\a', '\x13', '\x2', '\x2', '\xC4', '\xC5', '\a', 
		'\v', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\x12', '\n', '\x2', '\xC6', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', 
		'\xF', '\x2', '\x2', '\xC9', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', '\a', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x10', '\x2', 
		'\x2', '\xCC', '\xCD', '\a', '\v', '\x2', '\x2', '\xCD', '\xCE', '\x5', 
		'\x12', '\n', '\x2', '\xCE', '\xCF', '\a', '\xF', '\x2', '\x2', '\xCF', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', '\a', '\x2', 
		'\x2', '\xD1', '\xD2', '\a', '\x11', '\x2', '\x2', '\xD2', '\xD3', '\a', 
		'\xF', '\x2', '\x2', '\xD3', '!', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'%', '.', '\x34', '\x39', '?', '\x45', 'M', 'S', '[', '\x61', '\x66', 
		'h', 'm', 'v', '~', '\x87', '\x8D', '\x94', '\x9D', '\xA6', '\xAE', '\xB0', 
		'\xC6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
