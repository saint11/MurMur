//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\dev\murmur\MurMur\MurMur\Grammar\MurMurParser.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MurMur.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class MurMurParser : Parser {
	public const int
		WHITESPACE=1, NEWLINE=2, LINE_COMMENT=3, TAG_START=4, COMMAND_START=5, 
		FAST_PICK_START=6, TEXT=7, COMMAND_IGNORE=8, COMMAND_PARAMS_START=9, COMMAND_STRING_START=10, 
		COMMAND_PARAMS_SEPARATOR=11, COMMAND_END=12, KEYWORD_IF=13, KEYWORD_ELSE=14, 
		KEYWORD_END=15, KEYWORD_GOTO=16, KEYWORD_MENU=17, KEYWORD_MENU_OPTION=18, 
		KEYWORD_PICK=19, KEYWORD_PICK_THIS=20, TRUE=21, FALSE=22, NUMBER=23, INT=24, 
		WORD=25, ASSIGN_SIGNAL=26, COMPARISSON_SIGNAL=27, MUL_DIV_SIGNAL=28, ADD_SUB_SIGNAL=29, 
		SUB_TEXT_SEPARATOR=30, FAST_PICK_TEXT=31, FAST_PICK_END=32, STRING=33, 
		COMMAND_STRING_END=34;
	public const int
		RULE_murmur = 0, RULE_tag = 1, RULE_block = 2, RULE_pickBlock = 3, RULE_menuBlock = 4, 
		RULE_ifBlock = 5, RULE_line = 6, RULE_lineFragment = 7, RULE_inlineIfBlock = 8, 
		RULE_inlineIfTrueFragment = 9, RULE_inlineIfFalseFragment = 10, RULE_menuSubBlock = 11, 
		RULE_fastPickBlock = 12, RULE_pickThisBlock = 13, RULE_command = 14, RULE_expression = 15, 
		RULE_params = 16, RULE_pickCommand = 17, RULE_pickThisCommand = 18, RULE_menuCommand = 19, 
		RULE_menuOptionCommand = 20, RULE_ifCommand = 21, RULE_elseCommand = 22, 
		RULE_endCommand = 23;
	public static readonly string[] ruleNames = {
		"murmur", "tag", "block", "pickBlock", "menuBlock", "ifBlock", "line", 
		"lineFragment", "inlineIfBlock", "inlineIfTrueFragment", "inlineIfFalseFragment", 
		"menuSubBlock", "fastPickBlock", "pickThisBlock", "command", "expression", 
		"params", "pickCommand", "pickThisCommand", "menuCommand", "menuOptionCommand", 
		"ifCommand", "elseCommand", "endCommand"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "NEWLINE", "LINE_COMMENT", "TAG_START", "COMMAND_START", 
		"FAST_PICK_START", "TEXT", "COMMAND_IGNORE", "COMMAND_PARAMS_START", "COMMAND_STRING_START", 
		"COMMAND_PARAMS_SEPARATOR", "COMMAND_END", "KEYWORD_IF", "KEYWORD_ELSE", 
		"KEYWORD_END", "KEYWORD_GOTO", "KEYWORD_MENU", "KEYWORD_MENU_OPTION", 
		"KEYWORD_PICK", "KEYWORD_PICK_THIS", "TRUE", "FALSE", "NUMBER", "INT", 
		"WORD", "ASSIGN_SIGNAL", "COMPARISSON_SIGNAL", "MUL_DIV_SIGNAL", "ADD_SUB_SIGNAL", 
		"SUB_TEXT_SEPARATOR", "FAST_PICK_TEXT", "FAST_PICK_END", "STRING", "COMMAND_STRING_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MurMurParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MurMurParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MurmurContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public TagContext[] tag() {
			return GetRuleContexts<TagContext>();
		}
		public TagContext tag(int i) {
			return GetRuleContext<TagContext>(i);
		}
		public MurmurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_murmur; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMurmur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMurmur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMurmur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MurmurContext murmur() {
		MurmurContext _localctx = new MurmurContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_murmur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 48; Match(NEWLINE);
				}
				}
				State = 53;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 55;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 54; tag();
				}
				}
				State = 57;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAG_START );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public ITerminalNode TAG_START() { return GetToken(MurMurParser.TAG_START, 0); }
		public ITerminalNode TEXT() { return GetToken(MurMurParser.TEXT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(TAG_START);
			State = 60; Match(TEXT);
			State = 64;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 61; Match(NEWLINE);
				}
				}
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 67; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public PickBlockContext[] pickBlock() {
			return GetRuleContexts<PickBlockContext>();
		}
		public PickBlockContext pickBlock(int i) {
			return GetRuleContext<PickBlockContext>(i);
		}
		public MenuBlockContext[] menuBlock() {
			return GetRuleContexts<MenuBlockContext>();
		}
		public MenuBlockContext menuBlock(int i) {
			return GetRuleContext<MenuBlockContext>(i);
		}
		public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 73;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						State = 69; line();
						}
						break;

					case 2:
						{
						State = 70; pickBlock();
						}
						break;

					case 3:
						{
						State = 71; menuBlock();
						}
						break;

					case 4:
						{
						State = 72; ifBlock();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 75;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickBlockContext : ParserRuleContext {
		public PickCommandContext pickCommand() {
			return GetRuleContext<PickCommandContext>(0);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public PickThisBlockContext[] pickThisBlock() {
			return GetRuleContexts<PickThisBlockContext>();
		}
		public PickThisBlockContext pickThisBlock(int i) {
			return GetRuleContext<PickThisBlockContext>(i);
		}
		public PickBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickBlockContext pickBlock() {
		PickBlockContext _localctx = new PickBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_pickBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; pickCommand();
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 78; Match(NEWLINE);
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 85;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 84; pickThisBlock();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 87;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 89; endCommand();
			State = 96;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 91;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 90; Match(NEWLINE);
					}
					}
					State = 93;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			case Eof:
				{
				State = 95; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuBlockContext : ParserRuleContext {
		public MenuCommandContext menuCommand() {
			return GetRuleContext<MenuCommandContext>(0);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public MenuSubBlockContext[] menuSubBlock() {
			return GetRuleContexts<MenuSubBlockContext>();
		}
		public MenuSubBlockContext menuSubBlock(int i) {
			return GetRuleContext<MenuSubBlockContext>(i);
		}
		public MenuBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuBlockContext menuBlock() {
		MenuBlockContext _localctx = new MenuBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_menuBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; menuCommand();
			State = 102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 99; Match(NEWLINE);
				}
				}
				State = 104;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 106;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 105; menuSubBlock();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 108;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 110; endCommand();
			State = 117;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 112;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 111; Match(NEWLINE);
					}
					}
					State = 114;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			case Eof:
				{
				State = 116; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public ElseCommandContext elseCommand() {
			return GetRuleContext<ElseCommandContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; ifCommand();
			State = 123;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 120; Match(NEWLINE);
				}
				}
				State = 125;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 126; block();
			State = 130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 127; elseCommand();
				State = 128; block();
				}
				break;
			}
			State = 132; endCommand();
			State = 139;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 134;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 133; Match(NEWLINE);
					}
					}
					State = 136;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			case Eof:
				{
				State = 138; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public LineFragmentContext[] lineFragment() {
			return GetRuleContexts<LineFragmentContext>();
		}
		public LineFragmentContext lineFragment(int i) {
			return GetRuleContext<LineFragmentContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 141; lineFragment();
				}
				}
				State = 144;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMAND_START) | (1L << FAST_PICK_START) | (1L << TEXT))) != 0) );
			State = 152;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 147;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 146; Match(NEWLINE);
					}
					}
					State = 149;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			case Eof:
				{
				State = 151; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineFragmentContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(MurMurParser.TEXT, 0); }
		public InlineIfBlockContext inlineIfBlock() {
			return GetRuleContext<InlineIfBlockContext>(0);
		}
		public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public FastPickBlockContext fastPickBlock() {
			return GetRuleContext<FastPickBlockContext>(0);
		}
		public LineFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterLineFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitLineFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineFragmentContext lineFragment() {
		LineFragmentContext _localctx = new LineFragmentContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_lineFragment);
		try {
			State = 158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; Match(TEXT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155; inlineIfBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 156; command();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 157; fastPickBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineIfBlockContext : ParserRuleContext {
		public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		public InlineIfTrueFragmentContext inlineIfTrueFragment() {
			return GetRuleContext<InlineIfTrueFragmentContext>(0);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ElseCommandContext elseCommand() {
			return GetRuleContext<ElseCommandContext>(0);
		}
		public InlineIfFalseFragmentContext inlineIfFalseFragment() {
			return GetRuleContext<InlineIfFalseFragmentContext>(0);
		}
		public InlineIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterInlineIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitInlineIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineIfBlockContext inlineIfBlock() {
		InlineIfBlockContext _localctx = new InlineIfBlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_inlineIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; ifCommand();
			State = 161; inlineIfTrueFragment();
			State = 165;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 162; elseCommand();
				State = 163; inlineIfFalseFragment();
				}
				break;
			}
			State = 167; endCommand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineIfTrueFragmentContext : ParserRuleContext {
		public LineFragmentContext[] lineFragment() {
			return GetRuleContexts<LineFragmentContext>();
		}
		public LineFragmentContext lineFragment(int i) {
			return GetRuleContext<LineFragmentContext>(i);
		}
		public InlineIfTrueFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineIfTrueFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterInlineIfTrueFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitInlineIfTrueFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfTrueFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineIfTrueFragmentContext inlineIfTrueFragment() {
		InlineIfTrueFragmentContext _localctx = new InlineIfTrueFragmentContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_inlineIfTrueFragment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 169; lineFragment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineIfFalseFragmentContext : ParserRuleContext {
		public LineFragmentContext[] lineFragment() {
			return GetRuleContexts<LineFragmentContext>();
		}
		public LineFragmentContext lineFragment(int i) {
			return GetRuleContext<LineFragmentContext>(i);
		}
		public InlineIfFalseFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineIfFalseFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterInlineIfFalseFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitInlineIfFalseFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfFalseFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineIfFalseFragmentContext inlineIfFalseFragment() {
		InlineIfFalseFragmentContext _localctx = new InlineIfFalseFragmentContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_inlineIfFalseFragment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 174; lineFragment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 177;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuSubBlockContext : ParserRuleContext {
		public MenuOptionCommandContext menuOptionCommand() {
			return GetRuleContext<MenuOptionCommandContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public MenuSubBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuSubBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuSubBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuSubBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuSubBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuSubBlockContext menuSubBlock() {
		MenuSubBlockContext _localctx = new MenuSubBlockContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_menuSubBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; menuOptionCommand();
			State = 183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 180; Match(NEWLINE);
				}
				}
				State = 185;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 186; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FastPickBlockContext : ParserRuleContext {
		public ITerminalNode FAST_PICK_START() { return GetToken(MurMurParser.FAST_PICK_START, 0); }
		public ITerminalNode[] FAST_PICK_TEXT() { return GetTokens(MurMurParser.FAST_PICK_TEXT); }
		public ITerminalNode FAST_PICK_TEXT(int i) {
			return GetToken(MurMurParser.FAST_PICK_TEXT, i);
		}
		public ITerminalNode FAST_PICK_END() { return GetToken(MurMurParser.FAST_PICK_END, 0); }
		public ITerminalNode[] SUB_TEXT_SEPARATOR() { return GetTokens(MurMurParser.SUB_TEXT_SEPARATOR); }
		public ITerminalNode SUB_TEXT_SEPARATOR(int i) {
			return GetToken(MurMurParser.SUB_TEXT_SEPARATOR, i);
		}
		public FastPickBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fastPickBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterFastPickBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitFastPickBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFastPickBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FastPickBlockContext fastPickBlock() {
		FastPickBlockContext _localctx = new FastPickBlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_fastPickBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(FAST_PICK_START);
			State = 189; Match(FAST_PICK_TEXT);
			State = 194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SUB_TEXT_SEPARATOR) {
				{
				{
				State = 190; Match(SUB_TEXT_SEPARATOR);
				State = 191; Match(FAST_PICK_TEXT);
				}
				}
				State = 196;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 197; Match(FAST_PICK_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickThisBlockContext : ParserRuleContext {
		public PickThisCommandContext pickThisCommand() {
			return GetRuleContext<PickThisCommandContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public PickThisBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickThisBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickThisBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickThisBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickThisBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickThisBlockContext pickThisBlock() {
		PickThisBlockContext _localctx = new PickThisBlockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_pickThisBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; pickThisCommand();
			State = 203;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 200; Match(NEWLINE);
				}
				}
				State = 205;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 209;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 206; block();
					}
					} 
				}
				State = 211;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(COMMAND_START);
			State = 213; expression(0);
			State = 214; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		public ITerminalNode COMMAND_STRING_START() { return GetToken(MurMurParser.COMMAND_STRING_START, 0); }
		public ITerminalNode STRING() { return GetToken(MurMurParser.STRING, 0); }
		public ITerminalNode COMMAND_STRING_END() { return GetToken(MurMurParser.COMMAND_STRING_END, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodOrVariableExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public MethodOrVariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMethodOrVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMethodOrVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodOrVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD_SUB_SIGNAL() { return GetToken(MurMurParser.ADD_SUB_SIGNAL, 0); }
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpressionContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(MurMurParser.NUMBER, 0); }
		public ITerminalNode INT() { return GetToken(MurMurParser.INT, 0); }
		public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterNumberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitNumberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public ITerminalNode ASSIGN_SIGNAL() { return GetToken(MurMurParser.ASSIGN_SIGNAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterAssignExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitAssignExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparissonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMPARISSON_SIGNAL() { return GetToken(MurMurParser.COMPARISSON_SIGNAL, 0); }
		public ComparissonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterComparissonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitComparissonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparissonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public MethodExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMethodExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL_DIV_SIGNAL() { return GetToken(MurMurParser.MUL_DIV_SIGNAL, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ITerminalNode TRUE() { return GetToken(MurMurParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MurMurParser.FALSE, 0); }
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				_localctx = new NumberExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 217;
				_la = _input.La(1);
				if ( !(_la==NUMBER || _la==INT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				_localctx = new MethodOrVariableExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 218; Match(WORD);
				}
				break;

			case 3:
				{
				_localctx = new MethodExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 219; Match(WORD);
				State = 222;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					State = 220; Match(COMMAND_PARAMS_START);
					State = 221; @params();
					}
					break;
				}
				}
				break;

			case 4:
				{
				_localctx = new BooleanExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 224;
				_la = _input.La(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				{
				_localctx = new StringExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 225; Match(COMMAND_STRING_START);
				State = 226; Match(STRING);
				State = 227; Match(COMMAND_STRING_END);
				}
				break;

			case 6:
				{
				_localctx = new AssignExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 228; Match(WORD);
				State = 229; Match(ASSIGN_SIGNAL);
				State = 230; expression(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 244;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 242;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 233;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 234; Match(MUL_DIV_SIGNAL);
						State = 235; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 236;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 237; Match(ADD_SUB_SIGNAL);
						State = 238; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new ComparissonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 239;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 240; Match(COMPARISSON_SIGNAL);
						State = 241; expression(3);
						}
						break;
					}
					} 
				}
				State = 246;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMAND_PARAMS_SEPARATOR() { return GetTokens(MurMurParser.COMMAND_PARAMS_SEPARATOR); }
		public ITerminalNode COMMAND_PARAMS_SEPARATOR(int i) {
			return GetToken(MurMurParser.COMMAND_PARAMS_SEPARATOR, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; expression(0);
			State = 252;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 248; Match(COMMAND_PARAMS_SEPARATOR);
					State = 249; expression(0);
					}
					} 
				}
				State = 254;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_PICK() { return GetToken(MurMurParser.KEYWORD_PICK, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public PickCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickCommandContext pickCommand() {
		PickCommandContext _localctx = new PickCommandContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_pickCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(COMMAND_START);
			State = 256; Match(KEYWORD_PICK);
			State = 257; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickThisCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_PICK_THIS() { return GetToken(MurMurParser.KEYWORD_PICK_THIS, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ITerminalNode NUMBER() { return GetToken(MurMurParser.NUMBER, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public PickThisCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickThisCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickThisCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickThisCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickThisCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickThisCommandContext pickThisCommand() {
		PickThisCommandContext _localctx = new PickThisCommandContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_pickThisCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(COMMAND_START);
			State = 260; Match(KEYWORD_PICK_THIS);
			State = 261; Match(COMMAND_PARAMS_START);
			State = 262; Match(NUMBER);
			State = 263; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_MENU() { return GetToken(MurMurParser.KEYWORD_MENU, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MenuCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuCommandContext menuCommand() {
		MenuCommandContext _localctx = new MenuCommandContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_menuCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(COMMAND_START);
			State = 266; Match(KEYWORD_MENU);
			State = 269;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMAND_PARAMS_START) {
				{
				State = 267; Match(COMMAND_PARAMS_START);
				State = 268; expression(0);
				}
			}

			State = 271; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuOptionCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_MENU_OPTION() { return GetToken(MurMurParser.KEYWORD_MENU_OPTION, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public MenuOptionCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuOptionCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuOptionCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuOptionCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuOptionCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuOptionCommandContext menuOptionCommand() {
		MenuOptionCommandContext _localctx = new MenuOptionCommandContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_menuOptionCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(COMMAND_START);
			State = 274; Match(KEYWORD_MENU_OPTION);
			State = 275; Match(COMMAND_PARAMS_START);
			State = 276; expression(0);
			State = 277; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_IF() { return GetToken(MurMurParser.KEYWORD_IF, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterIfCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitIfCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_ifCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(COMMAND_START);
			State = 280; Match(KEYWORD_IF);
			State = 281; Match(COMMAND_PARAMS_START);
			State = 282; expression(0);
			State = 283; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_ELSE() { return GetToken(MurMurParser.KEYWORD_ELSE, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ElseCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterElseCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitElseCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseCommandContext elseCommand() {
		ElseCommandContext _localctx = new ElseCommandContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_elseCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(COMMAND_START);
			State = 286; Match(KEYWORD_ELSE);
			State = 287; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_END() { return GetToken(MurMurParser.KEYWORD_END, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public EndCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterEndCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitEndCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndCommandContext endCommand() {
		EndCommandContext _localctx = new EndCommandContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_endCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(COMMAND_START);
			State = 290; Match(KEYWORD_END);
			State = 291; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3$\x128\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\a\x2\x34\n"+
		"\x2\f\x2\xE\x2\x37\v\x2\x3\x2\x6\x2:\n\x2\r\x2\xE\x2;\x3\x3\x3\x3\x3\x3"+
		"\a\x3\x41\n\x3\f\x3\xE\x3\x44\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x6\x4L\n\x4\r\x4\xE\x4M\x3\x5\x3\x5\a\x5R\n\x5\f\x5\xE\x5U\v\x5\x3\x5"+
		"\x6\x5X\n\x5\r\x5\xE\x5Y\x3\x5\x3\x5\x6\x5^\n\x5\r\x5\xE\x5_\x3\x5\x5"+
		"\x5\x63\n\x5\x3\x6\x3\x6\a\x6g\n\x6\f\x6\xE\x6j\v\x6\x3\x6\x6\x6m\n\x6"+
		"\r\x6\xE\x6n\x3\x6\x3\x6\x6\x6s\n\x6\r\x6\xE\x6t\x3\x6\x5\x6x\n\x6\x3"+
		"\a\x3\a\a\a|\n\a\f\a\xE\a\x7F\v\a\x3\a\x3\a\x3\a\x3\a\x5\a\x85\n\a\x3"+
		"\a\x3\a\x6\a\x89\n\a\r\a\xE\a\x8A\x3\a\x5\a\x8E\n\a\x3\b\x6\b\x91\n\b"+
		"\r\b\xE\b\x92\x3\b\x6\b\x96\n\b\r\b\xE\b\x97\x3\b\x5\b\x9B\n\b\x3\t\x3"+
		"\t\x3\t\x3\t\x5\t\xA1\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xA8\n\n\x3\n\x3"+
		"\n\x3\v\x6\v\xAD\n\v\r\v\xE\v\xAE\x3\f\x6\f\xB2\n\f\r\f\xE\f\xB3\x3\r"+
		"\x3\r\a\r\xB8\n\r\f\r\xE\r\xBB\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\a"+
		"\xE\xC3\n\xE\f\xE\xE\xE\xC6\v\xE\x3\xE\x3\xE\x3\xF\x3\xF\a\xF\xCC\n\xF"+
		"\f\xF\xE\xF\xCF\v\xF\x3\xF\a\xF\xD2\n\xF\f\xF\xE\xF\xD5\v\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xE1"+
		"\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xEA\n\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11"+
		"\xF5\n\x11\f\x11\xE\x11\xF8\v\x11\x3\x12\x3\x12\x3\x12\a\x12\xFD\n\x12"+
		"\f\x12\xE\x12\x100\v\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x110\n\x15"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x2\x2\x3 \x1A\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$"+
		"\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x2\x4\x3\x2\x19\x1A\x3\x2\x17\x18\x13A"+
		"\x2\x35\x3\x2\x2\x2\x4=\x3\x2\x2\x2\x6K\x3\x2\x2\x2\bO\x3\x2\x2\x2\n\x64"+
		"\x3\x2\x2\x2\fy\x3\x2\x2\x2\xE\x90\x3\x2\x2\x2\x10\xA0\x3\x2\x2\x2\x12"+
		"\xA2\x3\x2\x2\x2\x14\xAC\x3\x2\x2\x2\x16\xB1\x3\x2\x2\x2\x18\xB5\x3\x2"+
		"\x2\x2\x1A\xBE\x3\x2\x2\x2\x1C\xC9\x3\x2\x2\x2\x1E\xD6\x3\x2\x2\x2 \xE9"+
		"\x3\x2\x2\x2\"\xF9\x3\x2\x2\x2$\x101\x3\x2\x2\x2&\x105\x3\x2\x2\x2(\x10B"+
		"\x3\x2\x2\x2*\x113\x3\x2\x2\x2,\x119\x3\x2\x2\x2.\x11F\x3\x2\x2\x2\x30"+
		"\x123\x3\x2\x2\x2\x32\x34\a\x4\x2\x2\x33\x32\x3\x2\x2\x2\x34\x37\x3\x2"+
		"\x2\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x39\x3\x2\x2\x2\x37"+
		"\x35\x3\x2\x2\x2\x38:\x5\x4\x3\x2\x39\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;\x39"+
		"\x3\x2\x2\x2;<\x3\x2\x2\x2<\x3\x3\x2\x2\x2=>\a\x6\x2\x2>\x42\a\t\x2\x2"+
		"?\x41\a\x4\x2\x2@?\x3\x2\x2\x2\x41\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42"+
		"\x43\x3\x2\x2\x2\x43\x45\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x45\x46\x5\x6"+
		"\x4\x2\x46\x5\x3\x2\x2\x2GL\x5\xE\b\x2HL\x5\b\x5\x2IL\x5\n\x6\x2JL\x5"+
		"\f\a\x2KG\x3\x2\x2\x2KH\x3\x2\x2\x2KI\x3\x2\x2\x2KJ\x3\x2\x2\x2LM\x3\x2"+
		"\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2N\a\x3\x2\x2\x2OS\x5$\x13\x2PR\a\x4"+
		"\x2\x2QP\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2TW\x3\x2"+
		"\x2\x2US\x3\x2\x2\x2VX\x5\x1C\xF\x2WV\x3\x2\x2\x2XY\x3\x2\x2\x2YW\x3\x2"+
		"\x2\x2YZ\x3\x2\x2\x2Z[\x3\x2\x2\x2[\x62\x5\x30\x19\x2\\^\a\x4\x2\x2]\\"+
		"\x3\x2\x2\x2^_\x3\x2\x2\x2_]\x3\x2\x2\x2_`\x3\x2\x2\x2`\x63\x3\x2\x2\x2"+
		"\x61\x63\a\x2\x2\x3\x62]\x3\x2\x2\x2\x62\x61\x3\x2\x2\x2\x63\t\x3\x2\x2"+
		"\x2\x64h\x5(\x15\x2\x65g\a\x4\x2\x2\x66\x65\x3\x2\x2\x2gj\x3\x2\x2\x2"+
		"h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2il\x3\x2\x2\x2jh\x3\x2\x2\x2km\x5\x18\r"+
		"\x2lk\x3\x2\x2\x2mn\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2op\x3\x2\x2"+
		"\x2pw\x5\x30\x19\x2qs\a\x4\x2\x2rq\x3\x2\x2\x2st\x3\x2\x2\x2tr\x3\x2\x2"+
		"\x2tu\x3\x2\x2\x2ux\x3\x2\x2\x2vx\a\x2\x2\x3wr\x3\x2\x2\x2wv\x3\x2\x2"+
		"\x2x\v\x3\x2\x2\x2y}\x5,\x17\x2z|\a\x4\x2\x2{z\x3\x2\x2\x2|\x7F\x3\x2"+
		"\x2\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\x80\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x80"+
		"\x84\x5\x6\x4\x2\x81\x82\x5.\x18\x2\x82\x83\x5\x6\x4\x2\x83\x85\x3\x2"+
		"\x2\x2\x84\x81\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86"+
		"\x8D\x5\x30\x19\x2\x87\x89\a\x4\x2\x2\x88\x87\x3\x2\x2\x2\x89\x8A\x3\x2"+
		"\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2\x8C"+
		"\x8E\a\x2\x2\x3\x8D\x88\x3\x2\x2\x2\x8D\x8C\x3\x2\x2\x2\x8E\r\x3\x2\x2"+
		"\x2\x8F\x91\x5\x10\t\x2\x90\x8F\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x90"+
		"\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x9A\x3\x2\x2\x2\x94\x96\a\x4\x2\x2"+
		"\x95\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97\x98\x3"+
		"\x2\x2\x2\x98\x9B\x3\x2\x2\x2\x99\x9B\a\x2\x2\x3\x9A\x95\x3\x2\x2\x2\x9A"+
		"\x99\x3\x2\x2\x2\x9B\xF\x3\x2\x2\x2\x9C\xA1\a\t\x2\x2\x9D\xA1\x5\x12\n"+
		"\x2\x9E\xA1\x5\x1E\x10\x2\x9F\xA1\x5\x1A\xE\x2\xA0\x9C\x3\x2\x2\x2\xA0"+
		"\x9D\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\x9F\x3\x2\x2\x2\xA1\x11\x3\x2"+
		"\x2\x2\xA2\xA3\x5,\x17\x2\xA3\xA7\x5\x14\v\x2\xA4\xA5\x5.\x18\x2\xA5\xA6"+
		"\x5\x16\f\x2\xA6\xA8\x3\x2\x2\x2\xA7\xA4\x3\x2\x2\x2\xA7\xA8\x3\x2\x2"+
		"\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAA\x5\x30\x19\x2\xAA\x13\x3\x2\x2\x2\xAB"+
		"\xAD\x5\x10\t\x2\xAC\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAC\x3\x2"+
		"\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\x15\x3\x2\x2\x2\xB0\xB2\x5\x10\t\x2\xB1"+
		"\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB3\xB4\x3\x2"+
		"\x2\x2\xB4\x17\x3\x2\x2\x2\xB5\xB9\x5*\x16\x2\xB6\xB8\a\x4\x2\x2\xB7\xB6"+
		"\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2"+
		"\x2\xBA\xBC\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBD\x5\x6\x4\x2\xBD\x19"+
		"\x3\x2\x2\x2\xBE\xBF\a\b\x2\x2\xBF\xC4\a!\x2\x2\xC0\xC1\a \x2\x2\xC1\xC3"+
		"\a!\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC6\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2"+
		"\xC4\xC5\x3\x2\x2\x2\xC5\xC7\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC7\xC8\a"+
		"\"\x2\x2\xC8\x1B\x3\x2\x2\x2\xC9\xCD\x5&\x14\x2\xCA\xCC\a\x4\x2\x2\xCB"+
		"\xCA\x3\x2\x2\x2\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2"+
		"\x2\x2\xCE\xD3\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD2\x5\x6\x4\x2\xD1"+
		"\xD0\x3\x2\x2\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2"+
		"\x2\x2\xD4\x1D\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xD7\a\a\x2\x2\xD7\xD8"+
		"\x5 \x11\x2\xD8\xD9\a\xE\x2\x2\xD9\x1F\x3\x2\x2\x2\xDA\xDB\b\x11\x1\x2"+
		"\xDB\xEA\t\x2\x2\x2\xDC\xEA\a\x1B\x2\x2\xDD\xE0\a\x1B\x2\x2\xDE\xDF\a"+
		"\v\x2\x2\xDF\xE1\x5\"\x12\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1"+
		"\xEA\x3\x2\x2\x2\xE2\xEA\t\x3\x2\x2\xE3\xE4\a\f\x2\x2\xE4\xE5\a#\x2\x2"+
		"\xE5\xEA\a$\x2\x2\xE6\xE7\a\x1B\x2\x2\xE7\xE8\a\x1C\x2\x2\xE8\xEA\x5 "+
		"\x11\x3\xE9\xDA\x3\x2\x2\x2\xE9\xDC\x3\x2\x2\x2\xE9\xDD\x3\x2\x2\x2\xE9"+
		"\xE2\x3\x2\x2\x2\xE9\xE3\x3\x2\x2\x2\xE9\xE6\x3\x2\x2\x2\xEA\xF6\x3\x2"+
		"\x2\x2\xEB\xEC\f\x6\x2\x2\xEC\xED\a\x1E\x2\x2\xED\xF5\x5 \x11\a\xEE\xEF"+
		"\f\x5\x2\x2\xEF\xF0\a\x1F\x2\x2\xF0\xF5\x5 \x11\x6\xF1\xF2\f\x4\x2\x2"+
		"\xF2\xF3\a\x1D\x2\x2\xF3\xF5\x5 \x11\x5\xF4\xEB\x3\x2\x2\x2\xF4\xEE\x3"+
		"\x2\x2\x2\xF4\xF1\x3\x2\x2\x2\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2"+
		"\xF6\xF7\x3\x2\x2\x2\xF7!\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9\xFE\x5 "+
		"\x11\x2\xFA\xFB\a\r\x2\x2\xFB\xFD\x5 \x11\x2\xFC\xFA\x3\x2\x2\x2\xFD\x100"+
		"\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF#\x3\x2\x2\x2"+
		"\x100\xFE\x3\x2\x2\x2\x101\x102\a\a\x2\x2\x102\x103\a\x15\x2\x2\x103\x104"+
		"\a\xE\x2\x2\x104%\x3\x2\x2\x2\x105\x106\a\a\x2\x2\x106\x107\a\x16\x2\x2"+
		"\x107\x108\a\v\x2\x2\x108\x109\a\x19\x2\x2\x109\x10A\a\xE\x2\x2\x10A\'"+
		"\x3\x2\x2\x2\x10B\x10C\a\a\x2\x2\x10C\x10F\a\x13\x2\x2\x10D\x10E\a\v\x2"+
		"\x2\x10E\x110\x5 \x11\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110"+
		"\x111\x3\x2\x2\x2\x111\x112\a\xE\x2\x2\x112)\x3\x2\x2\x2\x113\x114\a\a"+
		"\x2\x2\x114\x115\a\x14\x2\x2\x115\x116\a\v\x2\x2\x116\x117\x5 \x11\x2"+
		"\x117\x118\a\xE\x2\x2\x118+\x3\x2\x2\x2\x119\x11A\a\a\x2\x2\x11A\x11B"+
		"\a\xF\x2\x2\x11B\x11C\a\v\x2\x2\x11C\x11D\x5 \x11\x2\x11D\x11E\a\xE\x2"+
		"\x2\x11E-\x3\x2\x2\x2\x11F\x120\a\a\x2\x2\x120\x121\a\x10\x2\x2\x121\x122"+
		"\a\xE\x2\x2\x122/\x3\x2\x2\x2\x123\x124\a\a\x2\x2\x124\x125\a\x11\x2\x2"+
		"\x125\x126\a\xE\x2\x2\x126\x31\x3\x2\x2\x2$\x35;\x42KMSY_\x62hntw}\x84"+
		"\x8A\x8D\x92\x97\x9A\xA0\xA7\xAE\xB3\xB9\xC4\xCD\xD3\xE0\xE9\xF4\xF6\xFE"+
		"\x10F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MurMur.Grammar
