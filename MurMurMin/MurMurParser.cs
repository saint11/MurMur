//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\dev\murmur\MurMur\MurMur\Grammar\MurMurParser.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MurMur.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class MurMurParser : Parser {
	public const int
		WHITESPACE=1, NEWLINE=2, LINE_COMMENT=3, COMMENT=4, TAG_START=5, COMMAND_START=6, 
		INCLUDE_KEYWORD=7, DEF_KEYWORD=8, TEXT=9, EXIT_COMMAND=10, COMMAND_NEWLINE=11, 
		COMMAND_LINE_COMMENT=12, COMMAND_COMMENT=13, COMMAND_IGNORE=14, COMMAND_PARAMS_START=15, 
		COMMAND_STRING_START=16, OPEN_PAREN=17, CLOSE_PAREN=18, COMMAND_PARAMS_SEPARATOR=19, 
		COMMAND_END=20, KEYWORD_IF=21, KEYWORD_ELSE=22, KEYWORD_END=23, KEYWORD_GOTO=24, 
		KEYWORD_MENU=25, KEYWORD_MENU_OPTION=26, KEYWORD_PICK=27, KEYWORD_PICK_THIS=28, 
		KEYWORD_RETURN=29, TRUE=30, FALSE=31, NUMBER=32, WORD=33, ASSIGN_SIGNAL=34, 
		COMPARISSON_SIGNAL=35, MUL_DIV_SIGNAL=36, ADD_SUB_SIGNAL=37, STRING=38, 
		COMMAND_STRING_END=39;
	public const int
		RULE_murmur = 0, RULE_defBlock = 1, RULE_declaration = 2, RULE_tag = 3, 
		RULE_block = 4, RULE_menuBlock = 5, RULE_ifBlock = 6, RULE_line = 7, RULE_lineFragment = 8, 
		RULE_inlineIfBlock = 9, RULE_inlineIfTrueFragment = 10, RULE_inlineIfFalseFragment = 11, 
		RULE_menuSubBlock = 12, RULE_simpleCommand = 13, RULE_multiLineCommand = 14, 
		RULE_string = 15, RULE_expression = 16, RULE_params = 17, RULE_return = 18, 
		RULE_menuCommand = 19, RULE_menuOptionCommand = 20, RULE_ifCommand = 21, 
		RULE_elseCommand = 22, RULE_endCommand = 23;
	public static readonly string[] ruleNames = {
		"murmur", "defBlock", "declaration", "tag", "block", "menuBlock", "ifBlock", 
		"line", "lineFragment", "inlineIfBlock", "inlineIfTrueFragment", "inlineIfFalseFragment", 
		"menuSubBlock", "simpleCommand", "multiLineCommand", "string", "expression", 
		"params", "return", "menuCommand", "menuOptionCommand", "ifCommand", "elseCommand", 
		"endCommand"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'@include'", "'@def'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "NEWLINE", "LINE_COMMENT", "COMMENT", "TAG_START", 
		"COMMAND_START", "INCLUDE_KEYWORD", "DEF_KEYWORD", "TEXT", "EXIT_COMMAND", 
		"COMMAND_NEWLINE", "COMMAND_LINE_COMMENT", "COMMAND_COMMENT", "COMMAND_IGNORE", 
		"COMMAND_PARAMS_START", "COMMAND_STRING_START", "OPEN_PAREN", "CLOSE_PAREN", 
		"COMMAND_PARAMS_SEPARATOR", "COMMAND_END", "KEYWORD_IF", "KEYWORD_ELSE", 
		"KEYWORD_END", "KEYWORD_GOTO", "KEYWORD_MENU", "KEYWORD_MENU_OPTION", 
		"KEYWORD_PICK", "KEYWORD_PICK_THIS", "KEYWORD_RETURN", "TRUE", "FALSE", 
		"NUMBER", "WORD", "ASSIGN_SIGNAL", "COMPARISSON_SIGNAL", "MUL_DIV_SIGNAL", 
		"ADD_SUB_SIGNAL", "STRING", "COMMAND_STRING_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MurMurParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MurMurParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MurmurContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public TagContext[] tag() {
			return GetRuleContexts<TagContext>();
		}
		public TagContext tag(int i) {
			return GetRuleContext<TagContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public DefBlockContext[] defBlock() {
			return GetRuleContexts<DefBlockContext>();
		}
		public DefBlockContext defBlock(int i) {
			return GetRuleContext<DefBlockContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public ITerminalNode[] COMMAND_NEWLINE() { return GetTokens(MurMurParser.COMMAND_NEWLINE); }
		public ITerminalNode COMMAND_NEWLINE(int i) {
			return GetToken(MurMurParser.COMMAND_NEWLINE, i);
		}
		public ITerminalNode[] EXIT_COMMAND() { return GetTokens(MurMurParser.EXIT_COMMAND); }
		public ITerminalNode EXIT_COMMAND(int i) {
			return GetToken(MurMurParser.EXIT_COMMAND, i);
		}
		public MurmurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_murmur; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMurmur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMurmur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMurmur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MurmurContext murmur() {
		MurmurContext _localctx = new MurmurContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_murmur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWLINE) | (1L << TAG_START) | (1L << INCLUDE_KEYWORD) | (1L << DEF_KEYWORD) | (1L << EXIT_COMMAND) | (1L << COMMAND_NEWLINE))) != 0)) {
				{
				State = 54;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case TAG_START:
					{
					State = 48; tag();
					}
					break;
				case INCLUDE_KEYWORD:
					{
					State = 49; declaration();
					}
					break;
				case DEF_KEYWORD:
					{
					State = 50; defBlock();
					}
					break;
				case NEWLINE:
					{
					State = 51; Match(NEWLINE);
					}
					break;
				case COMMAND_NEWLINE:
					{
					State = 52; Match(COMMAND_NEWLINE);
					}
					break;
				case EXIT_COMMAND:
					{
					State = 53; Match(EXIT_COMMAND);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 59; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefBlockContext : ParserRuleContext {
		public ITerminalNode DEF_KEYWORD() { return GetToken(MurMurParser.DEF_KEYWORD, 0); }
		public ITerminalNode[] WORD() { return GetTokens(MurMurParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(MurMurParser.WORD, i);
		}
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ITerminalNode[] COMMAND_NEWLINE() { return GetTokens(MurMurParser.COMMAND_NEWLINE); }
		public ITerminalNode COMMAND_NEWLINE(int i) {
			return GetToken(MurMurParser.COMMAND_NEWLINE, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ReturnContext[] @return() {
			return GetRuleContexts<ReturnContext>();
		}
		public ReturnContext @return(int i) {
			return GetRuleContext<ReturnContext>(i);
		}
		public ITerminalNode[] COMMAND_PARAMS_SEPARATOR() { return GetTokens(MurMurParser.COMMAND_PARAMS_SEPARATOR); }
		public ITerminalNode COMMAND_PARAMS_SEPARATOR(int i) {
			return GetToken(MurMurParser.COMMAND_PARAMS_SEPARATOR, i);
		}
		public DefBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterDefBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitDefBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefBlockContext defBlock() {
		DefBlockContext _localctx = new DefBlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_defBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(DEF_KEYWORD);
			State = 62; Match(WORD);
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WORD) {
				{
				State = 63; Match(WORD);
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMAND_PARAMS_SEPARATOR) {
					{
					{
					State = 64; Match(COMMAND_PARAMS_SEPARATOR);
					State = 65; Match(WORD);
					}
					}
					State = 70;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 73; Match(COMMAND_PARAMS_START);
			State = 79;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 77;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case COMMAND_NEWLINE:
						{
						State = 74; Match(COMMAND_NEWLINE);
						}
						break;
					case COMMAND_STRING_START:
					case OPEN_PAREN:
					case TRUE:
					case FALSE:
					case NUMBER:
					case WORD:
						{
						State = 75; expression(0);
						}
						break;
					case KEYWORD_RETURN:
						{
						State = 76; @return();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 81;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode INCLUDE_KEYWORD() { return GetToken(MurMurParser.INCLUDE_KEYWORD, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(INCLUDE_KEYWORD);
			State = 83; Match(COMMAND_PARAMS_START);
			State = 84; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public ITerminalNode TAG_START() { return GetToken(MurMurParser.TAG_START, 0); }
		public ITerminalNode TEXT() { return GetToken(MurMurParser.TEXT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(TAG_START);
			State = 87; Match(TEXT);
			State = 91;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 88; Match(NEWLINE);
				}
				}
				State = 93;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 94; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		public MenuBlockContext[] menuBlock() {
			return GetRuleContexts<MenuBlockContext>();
		}
		public MenuBlockContext menuBlock(int i) {
			return GetRuleContext<MenuBlockContext>(i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 99;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						State = 96; ifBlock();
						}
						break;

					case 2:
						{
						State = 97; menuBlock();
						}
						break;

					case 3:
						{
						State = 98; line();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 101;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuBlockContext : ParserRuleContext {
		public MenuCommandContext menuCommand() {
			return GetRuleContext<MenuCommandContext>(0);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public MenuSubBlockContext[] menuSubBlock() {
			return GetRuleContexts<MenuSubBlockContext>();
		}
		public MenuSubBlockContext menuSubBlock(int i) {
			return GetRuleContext<MenuSubBlockContext>(i);
		}
		public MenuBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuBlockContext menuBlock() {
		MenuBlockContext _localctx = new MenuBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_menuBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; menuCommand();
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 104; Match(NEWLINE);
				}
				}
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 111;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 110; menuSubBlock();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 113;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 115; endCommand();
			State = 119;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 116; Match(NEWLINE);
					}
					} 
				}
				State = 121;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public ElseCommandContext elseCommand() {
			return GetRuleContext<ElseCommandContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_ifBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; ifCommand();
			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 123; Match(NEWLINE);
				}
				}
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 128; block();
			State = 137;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 129; elseCommand();
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 130; Match(NEWLINE);
					}
					}
					State = 133;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 135; block();
				}
				break;
			}
			State = 139; endCommand();
			State = 143;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 140; Match(NEWLINE);
					}
					} 
				}
				State = 145;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineFragmentContext[] lineFragment() {
			return GetRuleContexts<LineFragmentContext>();
		}
		public LineFragmentContext lineFragment(int i) {
			return GetRuleContext<LineFragmentContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_line);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 146; lineFragment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 149;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 154;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 151; Match(NEWLINE);
					}
					} 
				}
				State = 156;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineFragmentContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(MurMurParser.TEXT, 0); }
		public InlineIfBlockContext inlineIfBlock() {
			return GetRuleContext<InlineIfBlockContext>(0);
		}
		public SimpleCommandContext simpleCommand() {
			return GetRuleContext<SimpleCommandContext>(0);
		}
		public MultiLineCommandContext multiLineCommand() {
			return GetRuleContext<MultiLineCommandContext>(0);
		}
		public LineFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterLineFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitLineFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineFragmentContext lineFragment() {
		LineFragmentContext _localctx = new LineFragmentContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_lineFragment);
		try {
			State = 161;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; Match(TEXT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; inlineIfBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159; simpleCommand();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160; multiLineCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineIfBlockContext : ParserRuleContext {
		public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		public InlineIfTrueFragmentContext inlineIfTrueFragment() {
			return GetRuleContext<InlineIfTrueFragmentContext>(0);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ElseCommandContext elseCommand() {
			return GetRuleContext<ElseCommandContext>(0);
		}
		public InlineIfFalseFragmentContext inlineIfFalseFragment() {
			return GetRuleContext<InlineIfFalseFragmentContext>(0);
		}
		public InlineIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterInlineIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitInlineIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineIfBlockContext inlineIfBlock() {
		InlineIfBlockContext _localctx = new InlineIfBlockContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_inlineIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; ifCommand();
			State = 164; inlineIfTrueFragment();
			State = 168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 165; elseCommand();
				State = 166; inlineIfFalseFragment();
				}
				break;
			}
			State = 170; endCommand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineIfTrueFragmentContext : ParserRuleContext {
		public LineFragmentContext[] lineFragment() {
			return GetRuleContexts<LineFragmentContext>();
		}
		public LineFragmentContext lineFragment(int i) {
			return GetRuleContext<LineFragmentContext>(i);
		}
		public InlineIfTrueFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineIfTrueFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterInlineIfTrueFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitInlineIfTrueFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfTrueFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineIfTrueFragmentContext inlineIfTrueFragment() {
		InlineIfTrueFragmentContext _localctx = new InlineIfTrueFragmentContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_inlineIfTrueFragment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 172; lineFragment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 175;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineIfFalseFragmentContext : ParserRuleContext {
		public LineFragmentContext[] lineFragment() {
			return GetRuleContexts<LineFragmentContext>();
		}
		public LineFragmentContext lineFragment(int i) {
			return GetRuleContext<LineFragmentContext>(i);
		}
		public InlineIfFalseFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineIfFalseFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterInlineIfFalseFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitInlineIfFalseFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfFalseFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineIfFalseFragmentContext inlineIfFalseFragment() {
		InlineIfFalseFragmentContext _localctx = new InlineIfFalseFragmentContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_inlineIfFalseFragment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 177; lineFragment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 180;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuSubBlockContext : ParserRuleContext {
		public MenuOptionCommandContext menuOptionCommand() {
			return GetRuleContext<MenuOptionCommandContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MenuSubBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuSubBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuSubBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuSubBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuSubBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuSubBlockContext menuSubBlock() {
		MenuSubBlockContext _localctx = new MenuSubBlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_menuSubBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; menuOptionCommand();
			State = 186;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 183; Match(NEWLINE);
				}
				}
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 190;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 189; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public SimpleCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterSimpleCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitSimpleCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleCommandContext simpleCommand() {
		SimpleCommandContext _localctx = new SimpleCommandContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_simpleCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(COMMAND_START);
			State = 193; expression(0);
			State = 194; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ITerminalNode[] COMMAND_NEWLINE() { return GetTokens(MurMurParser.COMMAND_NEWLINE); }
		public ITerminalNode COMMAND_NEWLINE(int i) {
			return GetToken(MurMurParser.COMMAND_NEWLINE, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiLineCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMultiLineCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMultiLineCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineCommandContext multiLineCommand() {
		MultiLineCommandContext _localctx = new MultiLineCommandContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_multiLineCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(COMMAND_START);
			State = 200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMAND_NEWLINE) {
				{
				{
				State = 197; Match(COMMAND_NEWLINE);
				}
				}
				State = 202;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 209;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 203; expression(0);
				State = 205;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 204; Match(COMMAND_NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 207;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				}
				State = 211;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMAND_STRING_START) | (1L << OPEN_PAREN) | (1L << TRUE) | (1L << FALSE) | (1L << NUMBER) | (1L << WORD))) != 0) );
			State = 216;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMAND_NEWLINE) {
				{
				{
				State = 213; Match(COMMAND_NEWLINE);
				}
				}
				State = 218;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 219; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode COMMAND_STRING_START() { return GetToken(MurMurParser.COMMAND_STRING_START, 0); }
		public ITerminalNode STRING() { return GetToken(MurMurParser.STRING, 0); }
		public ITerminalNode COMMAND_STRING_END() { return GetToken(MurMurParser.COMMAND_STRING_END, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(COMMAND_STRING_START);
			State = 222; Match(STRING);
			State = 223; Match(COMMAND_STRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodOrVariableExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public MethodOrVariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMethodOrVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMethodOrVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodOrVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD_SUB_SIGNAL() { return GetToken(MurMurParser.ADD_SUB_SIGNAL, 0); }
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpressionContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(MurMurParser.NUMBER, 0); }
		public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterNumberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitNumberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public ITerminalNode ASSIGN_SIGNAL() { return GetToken(MurMurParser.ASSIGN_SIGNAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterAssignExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitAssignExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparissonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMPARISSON_SIGNAL() { return GetToken(MurMurParser.COMPARISSON_SIGNAL, 0); }
		public ComparissonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterComparissonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitComparissonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparissonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode OPEN_PAREN() { return GetToken(MurMurParser.OPEN_PAREN, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(MurMurParser.CLOSE_PAREN, 0); }
		public MethodExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMethodExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriorityExpressionContext : ExpressionContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(MurMurParser.OPEN_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(MurMurParser.CLOSE_PAREN, 0); }
		public PriorityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPriorityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPriorityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL_DIV_SIGNAL() { return GetToken(MurMurParser.MUL_DIV_SIGNAL, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ITerminalNode TRUE() { return GetToken(MurMurParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MurMurParser.FALSE, 0); }
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				_localctx = new NumberExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 226; Match(NUMBER);
				}
				break;

			case 2:
				{
				_localctx = new MethodOrVariableExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 227; Match(WORD);
				}
				break;

			case 3:
				{
				_localctx = new MethodExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 228; Match(WORD);
				State = 235;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					{
					State = 229; Match(COMMAND_PARAMS_START);
					State = 230; @params();
					}
					}
					break;

				case 2:
					{
					{
					State = 231; Match(OPEN_PAREN);
					State = 232; @params();
					State = 233; Match(CLOSE_PAREN);
					}
					}
					break;
				}
				}
				break;

			case 4:
				{
				_localctx = new BooleanExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 237;
				_la = _input.La(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				{
				_localctx = new StringExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 238; @string();
				}
				break;

			case 6:
				{
				_localctx = new PriorityExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 239; Match(OPEN_PAREN);
				State = 240; expression(0);
				State = 241; Match(CLOSE_PAREN);
				}
				break;

			case 7:
				{
				_localctx = new AssignExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 243; Match(WORD);
				State = 244; Match(ASSIGN_SIGNAL);
				State = 245; expression(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 262;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 260;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 248;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 249; Match(MUL_DIV_SIGNAL);
						State = 250; expression(7);
						}
						break;

					case 2:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 251;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 252; Match(MUL_DIV_SIGNAL);
						State = 253; expression(5);
						}
						break;

					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 254;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 255; Match(ADD_SUB_SIGNAL);
						State = 256; expression(4);
						}
						break;

					case 4:
						{
						_localctx = new ComparissonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 257;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 258; Match(COMPARISSON_SIGNAL);
						State = 259; expression(3);
						}
						break;
					}
					} 
				}
				State = 264;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMAND_PARAMS_SEPARATOR() { return GetTokens(MurMurParser.COMMAND_PARAMS_SEPARATOR); }
		public ITerminalNode COMMAND_PARAMS_SEPARATOR(int i) {
			return GetToken(MurMurParser.COMMAND_PARAMS_SEPARATOR, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; expression(0);
			State = 270;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 266; Match(COMMAND_PARAMS_SEPARATOR);
					State = 267; expression(0);
					}
					} 
				}
				State = 272;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		public ITerminalNode KEYWORD_RETURN() { return GetToken(MurMurParser.KEYWORD_RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(KEYWORD_RETURN);
			State = 274; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_MENU() { return GetToken(MurMurParser.KEYWORD_MENU, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MenuCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuCommandContext menuCommand() {
		MenuCommandContext _localctx = new MenuCommandContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_menuCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(COMMAND_START);
			State = 277; Match(KEYWORD_MENU);
			State = 280;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMAND_PARAMS_START) {
				{
				State = 278; Match(COMMAND_PARAMS_START);
				State = 279; expression(0);
				}
			}

			State = 282; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuOptionCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_MENU_OPTION() { return GetToken(MurMurParser.KEYWORD_MENU_OPTION, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ITerminalNode COMMAND_PARAMS_SEPARATOR() { return GetToken(MurMurParser.COMMAND_PARAMS_SEPARATOR, 0); }
		public MenuOptionCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuOptionCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuOptionCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuOptionCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuOptionCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuOptionCommandContext menuOptionCommand() {
		MenuOptionCommandContext _localctx = new MenuOptionCommandContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_menuOptionCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(COMMAND_START);
			State = 285; Match(KEYWORD_MENU_OPTION);
			State = 286; Match(COMMAND_PARAMS_START);
			State = 287; expression(0);
			State = 290;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMAND_PARAMS_SEPARATOR) {
				{
				State = 288; Match(COMMAND_PARAMS_SEPARATOR);
				State = 289; expression(0);
				}
			}

			State = 292; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_IF() { return GetToken(MurMurParser.KEYWORD_IF, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterIfCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitIfCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_ifCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; Match(COMMAND_START);
			State = 295; Match(KEYWORD_IF);
			State = 296; Match(COMMAND_PARAMS_START);
			State = 297; expression(0);
			State = 298; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_ELSE() { return GetToken(MurMurParser.KEYWORD_ELSE, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ElseCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterElseCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitElseCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseCommandContext elseCommand() {
		ElseCommandContext _localctx = new ElseCommandContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_elseCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(COMMAND_START);
			State = 301; Match(KEYWORD_ELSE);
			State = 302; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_END() { return GetToken(MurMurParser.KEYWORD_END, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public EndCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterEndCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitEndCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndCommandContext endCommand() {
		EndCommandContext _localctx = new EndCommandContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_endCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(COMMAND_START);
			State = 305; Match(KEYWORD_END);
			State = 306; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 4);

		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3)\x137\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\a\x2\x39\n\x2\f\x2\xE\x2<\v\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\a\x3\x45\n\x3\f\x3\xE\x3H\v\x3\x5\x3J\n\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\a\x3P\n\x3\f\x3\xE\x3S\v\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\a\x5\\\n\x5\f\x5\xE\x5_\v\x5\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\x6\x6\x6\x66\n\x6\r\x6\xE\x6g\x3\a\x3\a\a\al\n\a\f\a\xE\ao\v\a\x3"+
		"\a\x6\ar\n\a\r\a\xE\as\x3\a\x3\a\a\ax\n\a\f\a\xE\a{\v\a\x3\b\x3\b\x6\b"+
		"\x7F\n\b\r\b\xE\b\x80\x3\b\x3\b\x3\b\x6\b\x86\n\b\r\b\xE\b\x87\x3\b\x3"+
		"\b\x5\b\x8C\n\b\x3\b\x3\b\a\b\x90\n\b\f\b\xE\b\x93\v\b\x3\t\x6\t\x96\n"+
		"\t\r\t\xE\t\x97\x3\t\a\t\x9B\n\t\f\t\xE\t\x9E\v\t\x3\n\x3\n\x3\n\x3\n"+
		"\x5\n\xA4\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xAB\n\v\x3\v\x3\v\x3\f\x6"+
		"\f\xB0\n\f\r\f\xE\f\xB1\x3\r\x6\r\xB5\n\r\r\r\xE\r\xB6\x3\xE\x3\xE\a\xE"+
		"\xBB\n\xE\f\xE\xE\xE\xBE\v\xE\x3\xE\x5\xE\xC1\n\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\x10\x3\x10\a\x10\xC9\n\x10\f\x10\xE\x10\xCC\v\x10\x3\x10\x3\x10"+
		"\x6\x10\xD0\n\x10\r\x10\xE\x10\xD1\x6\x10\xD4\n\x10\r\x10\xE\x10\xD5\x3"+
		"\x10\a\x10\xD9\n\x10\f\x10\xE\x10\xDC\v\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\xEE\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x5\x12\xF9\n\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x107\n"+
		"\x12\f\x12\xE\x12\x10A\v\x12\x3\x13\x3\x13\x3\x13\a\x13\x10F\n\x13\f\x13"+
		"\xE\x13\x112\v\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5"+
		"\x15\x11B\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x5\x16\x125\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x2"+
		"\x2\x3\"\x1A\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x30\x2\x2\x3\x3\x2 !\x151\x2:\x3\x2\x2\x2\x4?\x3\x2\x2\x2\x6T\x3\x2\x2"+
		"\x2\bX\x3\x2\x2\x2\n\x65\x3\x2\x2\x2\fi\x3\x2\x2\x2\xE|\x3\x2\x2\x2\x10"+
		"\x95\x3\x2\x2\x2\x12\xA3\x3\x2\x2\x2\x14\xA5\x3\x2\x2\x2\x16\xAF\x3\x2"+
		"\x2\x2\x18\xB4\x3\x2\x2\x2\x1A\xB8\x3\x2\x2\x2\x1C\xC2\x3\x2\x2\x2\x1E"+
		"\xC6\x3\x2\x2\x2 \xDF\x3\x2\x2\x2\"\xF8\x3\x2\x2\x2$\x10B\x3\x2\x2\x2"+
		"&\x113\x3\x2\x2\x2(\x116\x3\x2\x2\x2*\x11E\x3\x2\x2\x2,\x128\x3\x2\x2"+
		"\x2.\x12E\x3\x2\x2\x2\x30\x132\x3\x2\x2\x2\x32\x39\x5\b\x5\x2\x33\x39"+
		"\x5\x6\x4\x2\x34\x39\x5\x4\x3\x2\x35\x39\a\x4\x2\x2\x36\x39\a\r\x2\x2"+
		"\x37\x39\a\f\x2\x2\x38\x32\x3\x2\x2\x2\x38\x33\x3\x2\x2\x2\x38\x34\x3"+
		"\x2\x2\x2\x38\x35\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x37\x3\x2\x2\x2"+
		"\x39<\x3\x2\x2\x2:\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;=\x3\x2\x2\x2<:\x3\x2"+
		"\x2\x2=>\a\x2\x2\x3>\x3\x3\x2\x2\x2?@\a\n\x2\x2@I\a#\x2\x2\x41\x46\a#"+
		"\x2\x2\x42\x43\a\x15\x2\x2\x43\x45\a#\x2\x2\x44\x42\x3\x2\x2\x2\x45H\x3"+
		"\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2GJ\x3\x2\x2\x2H\x46\x3\x2"+
		"\x2\x2I\x41\x3\x2\x2\x2IJ\x3\x2\x2\x2JK\x3\x2\x2\x2KQ\a\x11\x2\x2LP\a"+
		"\r\x2\x2MP\x5\"\x12\x2NP\x5&\x14\x2OL\x3\x2\x2\x2OM\x3\x2\x2\x2ON\x3\x2"+
		"\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2R\x5\x3\x2\x2\x2SQ\x3"+
		"\x2\x2\x2TU\a\t\x2\x2UV\a\x11\x2\x2VW\x5 \x11\x2W\a\x3\x2\x2\x2XY\a\a"+
		"\x2\x2Y]\a\v\x2\x2Z\\\a\x4\x2\x2[Z\x3\x2\x2\x2\\_\x3\x2\x2\x2][\x3\x2"+
		"\x2\x2]^\x3\x2\x2\x2^`\x3\x2\x2\x2_]\x3\x2\x2\x2`\x61\x5\n\x6\x2\x61\t"+
		"\x3\x2\x2\x2\x62\x66\x5\xE\b\x2\x63\x66\x5\f\a\x2\x64\x66\x5\x10\t\x2"+
		"\x65\x62\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x64\x3\x2\x2\x2\x66g\x3\x2"+
		"\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2h\v\x3\x2\x2\x2im\x5(\x15\x2jl\a"+
		"\x4\x2\x2kj\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2nq\x3"+
		"\x2\x2\x2om\x3\x2\x2\x2pr\x5\x1A\xE\x2qp\x3\x2\x2\x2rs\x3\x2\x2\x2sq\x3"+
		"\x2\x2\x2st\x3\x2\x2\x2tu\x3\x2\x2\x2uy\x5\x30\x19\x2vx\a\x4\x2\x2wv\x3"+
		"\x2\x2\x2x{\x3\x2\x2\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z\r\x3\x2\x2\x2{y\x3"+
		"\x2\x2\x2|~\x5,\x17\x2}\x7F\a\x4\x2\x2~}\x3\x2\x2\x2\x7F\x80\x3\x2\x2"+
		"\x2\x80~\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x8B\x5"+
		"\n\x6\x2\x83\x85\x5.\x18\x2\x84\x86\a\x4\x2\x2\x85\x84\x3\x2\x2\x2\x86"+
		"\x87\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89\x3\x2"+
		"\x2\x2\x89\x8A\x5\n\x6\x2\x8A\x8C\x3\x2\x2\x2\x8B\x83\x3\x2\x2\x2\x8B"+
		"\x8C\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x91\x5\x30\x19\x2\x8E\x90\a\x4"+
		"\x2\x2\x8F\x8E\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91"+
		"\x92\x3\x2\x2\x2\x92\xF\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94\x96\x5\x12"+
		"\n\x2\x95\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97"+
		"\x98\x3\x2\x2\x2\x98\x9C\x3\x2\x2\x2\x99\x9B\a\x4\x2\x2\x9A\x99\x3\x2"+
		"\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D"+
		"\x11\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA4\a\v\x2\x2\xA0\xA4\x5\x14"+
		"\v\x2\xA1\xA4\x5\x1C\xF\x2\xA2\xA4\x5\x1E\x10\x2\xA3\x9F\x3\x2\x2\x2\xA3"+
		"\xA0\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA2\x3\x2\x2\x2\xA4\x13\x3\x2"+
		"\x2\x2\xA5\xA6\x5,\x17\x2\xA6\xAA\x5\x16\f\x2\xA7\xA8\x5.\x18\x2\xA8\xA9"+
		"\x5\x18\r\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA7\x3\x2\x2\x2\xAA\xAB\x3\x2\x2"+
		"\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\x5\x30\x19\x2\xAD\x15\x3\x2\x2\x2\xAE"+
		"\xB0\x5\x12\n\x2\xAF\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xAF\x3\x2"+
		"\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\x17\x3\x2\x2\x2\xB3\xB5\x5\x12\n\x2\xB4"+
		"\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2"+
		"\x2\x2\xB7\x19\x3\x2\x2\x2\xB8\xBC\x5*\x16\x2\xB9\xBB\a\x4\x2\x2\xBA\xB9"+
		"\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2"+
		"\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC1\x5\n\x6\x2\xC0\xBF"+
		"\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\x1B\x3\x2\x2\x2\xC2\xC3\a\b\x2\x2"+
		"\xC3\xC4\x5\"\x12\x2\xC4\xC5\a\x16\x2\x2\xC5\x1D\x3\x2\x2\x2\xC6\xCA\a"+
		"\b\x2\x2\xC7\xC9\a\r\x2\x2\xC8\xC7\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA"+
		"\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xD3\x3\x2\x2\x2\xCC\xCA\x3\x2"+
		"\x2\x2\xCD\xCF\x5\"\x12\x2\xCE\xD0\a\r\x2\x2\xCF\xCE\x3\x2\x2\x2\xD0\xD1"+
		"\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD4\x3\x2\x2"+
		"\x2\xD3\xCD\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD5\xD6"+
		"\x3\x2\x2\x2\xD6\xDA\x3\x2\x2\x2\xD7\xD9\a\r\x2\x2\xD8\xD7\x3\x2\x2\x2"+
		"\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDD\x3"+
		"\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDE\a\x16\x2\x2\xDE\x1F\x3\x2\x2\x2"+
		"\xDF\xE0\a\x12\x2\x2\xE0\xE1\a(\x2\x2\xE1\xE2\a)\x2\x2\xE2!\x3\x2\x2\x2"+
		"\xE3\xE4\b\x12\x1\x2\xE4\xF9\a\"\x2\x2\xE5\xF9\a#\x2\x2\xE6\xED\a#\x2"+
		"\x2\xE7\xE8\a\x11\x2\x2\xE8\xEE\x5$\x13\x2\xE9\xEA\a\x13\x2\x2\xEA\xEB"+
		"\x5$\x13\x2\xEB\xEC\a\x14\x2\x2\xEC\xEE\x3\x2\x2\x2\xED\xE7\x3\x2\x2\x2"+
		"\xED\xE9\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xF9\x3\x2\x2\x2\xEF\xF9\t"+
		"\x2\x2\x2\xF0\xF9\x5 \x11\x2\xF1\xF2\a\x13\x2\x2\xF2\xF3\x5\"\x12\x2\xF3"+
		"\xF4\a\x14\x2\x2\xF4\xF9\x3\x2\x2\x2\xF5\xF6\a#\x2\x2\xF6\xF7\a$\x2\x2"+
		"\xF7\xF9\x5\"\x12\x3\xF8\xE3\x3\x2\x2\x2\xF8\xE5\x3\x2\x2\x2\xF8\xE6\x3"+
		"\x2\x2\x2\xF8\xEF\x3\x2\x2\x2\xF8\xF0\x3\x2\x2\x2\xF8\xF1\x3\x2\x2\x2"+
		"\xF8\xF5\x3\x2\x2\x2\xF9\x108\x3\x2\x2\x2\xFA\xFB\f\b\x2\x2\xFB\xFC\a"+
		"&\x2\x2\xFC\x107\x5\"\x12\t\xFD\xFE\f\x6\x2\x2\xFE\xFF\a&\x2\x2\xFF\x107"+
		"\x5\"\x12\a\x100\x101\f\x5\x2\x2\x101\x102\a\'\x2\x2\x102\x107\x5\"\x12"+
		"\x6\x103\x104\f\x4\x2\x2\x104\x105\a%\x2\x2\x105\x107\x5\"\x12\x5\x106"+
		"\xFA\x3\x2\x2\x2\x106\xFD\x3\x2\x2\x2\x106\x100\x3\x2\x2\x2\x106\x103"+
		"\x3\x2\x2\x2\x107\x10A\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x108\x109\x3"+
		"\x2\x2\x2\x109#\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B\x110\x5\"\x12\x2"+
		"\x10C\x10D\a\x15\x2\x2\x10D\x10F\x5\"\x12\x2\x10E\x10C\x3\x2\x2\x2\x10F"+
		"\x112\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111%\x3"+
		"\x2\x2\x2\x112\x110\x3\x2\x2\x2\x113\x114\a\x1F\x2\x2\x114\x115\x5\"\x12"+
		"\x2\x115\'\x3\x2\x2\x2\x116\x117\a\b\x2\x2\x117\x11A\a\x1B\x2\x2\x118"+
		"\x119\a\x11\x2\x2\x119\x11B\x5\"\x12\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B"+
		"\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11D\a\x16\x2\x2\x11D)\x3\x2\x2"+
		"\x2\x11E\x11F\a\b\x2\x2\x11F\x120\a\x1C\x2\x2\x120\x121\a\x11\x2\x2\x121"+
		"\x124\x5\"\x12\x2\x122\x123\a\x15\x2\x2\x123\x125\x5\"\x12\x2\x124\x122"+
		"\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x127\a\x16"+
		"\x2\x2\x127+\x3\x2\x2\x2\x128\x129\a\b\x2\x2\x129\x12A\a\x17\x2\x2\x12A"+
		"\x12B\a\x11\x2\x2\x12B\x12C\x5\"\x12\x2\x12C\x12D\a\x16\x2\x2\x12D-\x3"+
		"\x2\x2\x2\x12E\x12F\a\b\x2\x2\x12F\x130\a\x18\x2\x2\x130\x131\a\x16\x2"+
		"\x2\x131/\x3\x2\x2\x2\x132\x133\a\b\x2\x2\x133\x134\a\x19\x2\x2\x134\x135"+
		"\a\x16\x2\x2\x135\x31\x3\x2\x2\x2%\x38:\x46IOQ]\x65gmsy\x80\x87\x8B\x91"+
		"\x97\x9C\xA3\xAA\xB1\xB6\xBC\xC0\xCA\xD1\xD5\xDA\xED\xF8\x106\x108\x110"+
		"\x11A\x124";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MurMur.Grammar
