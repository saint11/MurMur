//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\dev\murmur\MurMur\MurMur\Grammar\MurMurParser.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MurMur.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class MurMurParser : Parser {
	public const int
		WHITESPACE=1, NEWLINE=2, LINE_COMMENT=3, COMMENT=4, TAG_START=5, COMMAND_START=6, 
		INCLUDE_KEYWORD=7, TEXT=8, NEW_TAG=9, COMMAND_NEWLINE=10, COMMAND_IGNORE=11, 
		COMMAND_LINE_COMMENT=12, COMMAND_COMMENT=13, COMMAND_PARAMS_START=14, 
		COMMAND_STRING_START=15, OPEN_PAREN=16, CLOSE_PAREN=17, COMMAND_PARAMS_SEPARATOR=18, 
		COMMAND_END=19, KEYWORD_IF=20, KEYWORD_ELSE=21, KEYWORD_END=22, KEYWORD_GOTO=23, 
		KEYWORD_MENU=24, KEYWORD_MENU_OPTION=25, KEYWORD_PICK=26, KEYWORD_PICK_THIS=27, 
		TRUE=28, FALSE=29, NUMBER=30, WORD=31, ASSIGN_SIGNAL=32, COMPARISSON_SIGNAL=33, 
		MUL_DIV_SIGNAL=34, ADD_SUB_SIGNAL=35, STRING=36, COMMAND_STRING_END=37;
	public const int
		RULE_murmur = 0, RULE_tag = 1, RULE_block = 2, RULE_pickBlock = 3, RULE_menuBlock = 4, 
		RULE_ifBlock = 5, RULE_line = 6, RULE_lineFragment = 7, RULE_inlineIfBlock = 8, 
		RULE_inlineIfTrueFragment = 9, RULE_inlineIfFalseFragment = 10, RULE_menuSubBlock = 11, 
		RULE_pickThisBlock = 12, RULE_simpleCommand = 13, RULE_multiLineCommand = 14, 
		RULE_string = 15, RULE_expression = 16, RULE_params = 17, RULE_pickCommand = 18, 
		RULE_pickThisCommand = 19, RULE_menuCommand = 20, RULE_menuOptionCommand = 21, 
		RULE_ifCommand = 22, RULE_elseCommand = 23, RULE_endCommand = 24, RULE_declaration = 25;
	public static readonly string[] ruleNames = {
		"murmur", "tag", "block", "pickBlock", "menuBlock", "ifBlock", "line", 
		"lineFragment", "inlineIfBlock", "inlineIfTrueFragment", "inlineIfFalseFragment", 
		"menuSubBlock", "pickThisBlock", "simpleCommand", "multiLineCommand", 
		"string", "expression", "params", "pickCommand", "pickThisCommand", "menuCommand", 
		"menuOptionCommand", "ifCommand", "elseCommand", "endCommand", "declaration"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'@include'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "NEWLINE", "LINE_COMMENT", "COMMENT", "TAG_START", 
		"COMMAND_START", "INCLUDE_KEYWORD", "TEXT", "NEW_TAG", "COMMAND_NEWLINE", 
		"COMMAND_IGNORE", "COMMAND_LINE_COMMENT", "COMMAND_COMMENT", "COMMAND_PARAMS_START", 
		"COMMAND_STRING_START", "OPEN_PAREN", "CLOSE_PAREN", "COMMAND_PARAMS_SEPARATOR", 
		"COMMAND_END", "KEYWORD_IF", "KEYWORD_ELSE", "KEYWORD_END", "KEYWORD_GOTO", 
		"KEYWORD_MENU", "KEYWORD_MENU_OPTION", "KEYWORD_PICK", "KEYWORD_PICK_THIS", 
		"TRUE", "FALSE", "NUMBER", "WORD", "ASSIGN_SIGNAL", "COMPARISSON_SIGNAL", 
		"MUL_DIV_SIGNAL", "ADD_SUB_SIGNAL", "STRING", "COMMAND_STRING_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MurMurParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MurMurParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MurmurContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public TagContext[] tag() {
			return GetRuleContexts<TagContext>();
		}
		public TagContext tag(int i) {
			return GetRuleContext<TagContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public MurmurContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_murmur; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMurmur(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMurmur(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMurmur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MurmurContext murmur() {
		MurmurContext _localctx = new MurmurContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_murmur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 52; Match(NEWLINE);
				}
				}
				State = 57;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 60;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 60;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case TAG_START:
					{
					State = 58; tag();
					}
					break;
				case INCLUDE_KEYWORD:
					{
					State = 59; declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 62;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TAG_START || _la==INCLUDE_KEYWORD );
			State = 64; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public ITerminalNode TAG_START() { return GetToken(MurMurParser.TAG_START, 0); }
		public ITerminalNode TEXT() { return GetToken(MurMurParser.TEXT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(TAG_START);
			State = 67; Match(TEXT);
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 68; Match(NEWLINE);
				}
				}
				State = 73;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 74; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		public PickBlockContext[] pickBlock() {
			return GetRuleContexts<PickBlockContext>();
		}
		public PickBlockContext pickBlock(int i) {
			return GetRuleContext<PickBlockContext>(i);
		}
		public MenuBlockContext[] menuBlock() {
			return GetRuleContexts<MenuBlockContext>();
		}
		public MenuBlockContext menuBlock(int i) {
			return GetRuleContext<MenuBlockContext>(i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 80;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
					case 1:
						{
						State = 76; ifBlock();
						}
						break;

					case 2:
						{
						State = 77; pickBlock();
						}
						break;

					case 3:
						{
						State = 78; menuBlock();
						}
						break;

					case 4:
						{
						State = 79; line();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 82;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickBlockContext : ParserRuleContext {
		public PickCommandContext pickCommand() {
			return GetRuleContext<PickCommandContext>(0);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public PickThisBlockContext[] pickThisBlock() {
			return GetRuleContexts<PickThisBlockContext>();
		}
		public PickThisBlockContext pickThisBlock(int i) {
			return GetRuleContext<PickThisBlockContext>(i);
		}
		public PickBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickBlockContext pickBlock() {
		PickBlockContext _localctx = new PickBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_pickBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; pickCommand();
			State = 88;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 85; Match(NEWLINE);
				}
				}
				State = 90;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 92;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 91; pickThisBlock();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 94;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 96; endCommand();
			State = 103;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 98;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 97; Match(NEWLINE);
					}
					}
					State = 100;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			case Eof:
				{
				State = 102; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuBlockContext : ParserRuleContext {
		public MenuCommandContext menuCommand() {
			return GetRuleContext<MenuCommandContext>(0);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public MenuSubBlockContext[] menuSubBlock() {
			return GetRuleContexts<MenuSubBlockContext>();
		}
		public MenuSubBlockContext menuSubBlock(int i) {
			return GetRuleContext<MenuSubBlockContext>(i);
		}
		public MenuBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuBlockContext menuBlock() {
		MenuBlockContext _localctx = new MenuBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_menuBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; menuCommand();
			State = 109;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 106; Match(NEWLINE);
				}
				}
				State = 111;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 113;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 112; menuSubBlock();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 115;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 117; endCommand();
			State = 124;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 119;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 118; Match(NEWLINE);
					}
					}
					State = 121;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			case Eof:
				{
				State = 123; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public ElseCommandContext elseCommand() {
			return GetRuleContext<ElseCommandContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; ifCommand();
			State = 128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 127; Match(NEWLINE);
				}
				}
				State = 130;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 132; block();
			State = 141;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 133; elseCommand();
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 134; Match(NEWLINE);
					}
					}
					State = 137;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 139; block();
				}
				break;
			}
			State = 143; endCommand();
			State = 150;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 145;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 144; Match(NEWLINE);
					}
					}
					State = 147;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			case Eof:
				{
				State = 149; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MurMurParser.Eof, 0); }
		public LineFragmentContext[] lineFragment() {
			return GetRuleContexts<LineFragmentContext>();
		}
		public LineFragmentContext lineFragment(int i) {
			return GetRuleContext<LineFragmentContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 152; lineFragment();
				}
				}
				State = 155;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==COMMAND_START || _la==TEXT );
			State = 163;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEWLINE:
				{
				State = 158;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 157; Match(NEWLINE);
					}
					}
					State = 160;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			case Eof:
				{
				State = 162; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineFragmentContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(MurMurParser.TEXT, 0); }
		public InlineIfBlockContext inlineIfBlock() {
			return GetRuleContext<InlineIfBlockContext>(0);
		}
		public SimpleCommandContext simpleCommand() {
			return GetRuleContext<SimpleCommandContext>(0);
		}
		public MultiLineCommandContext multiLineCommand() {
			return GetRuleContext<MultiLineCommandContext>(0);
		}
		public LineFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterLineFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitLineFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineFragmentContext lineFragment() {
		LineFragmentContext _localctx = new LineFragmentContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_lineFragment);
		try {
			State = 169;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; Match(TEXT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; inlineIfBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 167; simpleCommand();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 168; multiLineCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineIfBlockContext : ParserRuleContext {
		public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		public InlineIfTrueFragmentContext inlineIfTrueFragment() {
			return GetRuleContext<InlineIfTrueFragmentContext>(0);
		}
		public EndCommandContext endCommand() {
			return GetRuleContext<EndCommandContext>(0);
		}
		public ElseCommandContext elseCommand() {
			return GetRuleContext<ElseCommandContext>(0);
		}
		public InlineIfFalseFragmentContext inlineIfFalseFragment() {
			return GetRuleContext<InlineIfFalseFragmentContext>(0);
		}
		public InlineIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterInlineIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitInlineIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineIfBlockContext inlineIfBlock() {
		InlineIfBlockContext _localctx = new InlineIfBlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_inlineIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; ifCommand();
			State = 172; inlineIfTrueFragment();
			State = 176;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 173; elseCommand();
				State = 174; inlineIfFalseFragment();
				}
				break;
			}
			State = 178; endCommand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineIfTrueFragmentContext : ParserRuleContext {
		public LineFragmentContext[] lineFragment() {
			return GetRuleContexts<LineFragmentContext>();
		}
		public LineFragmentContext lineFragment(int i) {
			return GetRuleContext<LineFragmentContext>(i);
		}
		public InlineIfTrueFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineIfTrueFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterInlineIfTrueFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitInlineIfTrueFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfTrueFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineIfTrueFragmentContext inlineIfTrueFragment() {
		InlineIfTrueFragmentContext _localctx = new InlineIfTrueFragmentContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_inlineIfTrueFragment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 180; lineFragment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 183;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineIfFalseFragmentContext : ParserRuleContext {
		public LineFragmentContext[] lineFragment() {
			return GetRuleContexts<LineFragmentContext>();
		}
		public LineFragmentContext lineFragment(int i) {
			return GetRuleContext<LineFragmentContext>(i);
		}
		public InlineIfFalseFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineIfFalseFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterInlineIfFalseFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitInlineIfFalseFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfFalseFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineIfFalseFragmentContext inlineIfFalseFragment() {
		InlineIfFalseFragmentContext _localctx = new InlineIfFalseFragmentContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_inlineIfFalseFragment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 185; lineFragment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 188;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuSubBlockContext : ParserRuleContext {
		public MenuOptionCommandContext menuOptionCommand() {
			return GetRuleContext<MenuOptionCommandContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MenuSubBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuSubBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuSubBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuSubBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuSubBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuSubBlockContext menuSubBlock() {
		MenuSubBlockContext _localctx = new MenuSubBlockContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_menuSubBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; menuOptionCommand();
			State = 194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 191; Match(NEWLINE);
				}
				}
				State = 196;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 198;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 197; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickThisBlockContext : ParserRuleContext {
		public PickThisCommandContext pickThisCommand() {
			return GetRuleContext<PickThisCommandContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(MurMurParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(MurMurParser.NEWLINE, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public PickThisBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickThisBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickThisBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickThisBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickThisBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickThisBlockContext pickThisBlock() {
		PickThisBlockContext _localctx = new PickThisBlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_pickThisBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; pickThisCommand();
			State = 204;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 201; Match(NEWLINE);
				}
				}
				State = 206;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 210;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 207; block();
					}
					} 
				}
				State = 212;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public SimpleCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterSimpleCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitSimpleCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleCommandContext simpleCommand() {
		SimpleCommandContext _localctx = new SimpleCommandContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_simpleCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(COMMAND_START);
			State = 214; expression(0);
			State = 215; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ITerminalNode[] COMMAND_NEWLINE() { return GetTokens(MurMurParser.COMMAND_NEWLINE); }
		public ITerminalNode COMMAND_NEWLINE(int i) {
			return GetToken(MurMurParser.COMMAND_NEWLINE, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiLineCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMultiLineCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMultiLineCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineCommandContext multiLineCommand() {
		MultiLineCommandContext _localctx = new MultiLineCommandContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_multiLineCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(COMMAND_START);
			State = 221;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMAND_NEWLINE) {
				{
				{
				State = 218; Match(COMMAND_NEWLINE);
				}
				}
				State = 223;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 230;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 224; expression(0);
				State = 226;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 225; Match(COMMAND_NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 228;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				}
				State = 232;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMAND_STRING_START) | (1L << OPEN_PAREN) | (1L << TRUE) | (1L << FALSE) | (1L << NUMBER) | (1L << WORD))) != 0) );
			State = 237;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMAND_NEWLINE) {
				{
				{
				State = 234; Match(COMMAND_NEWLINE);
				}
				}
				State = 239;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 240; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode COMMAND_STRING_START() { return GetToken(MurMurParser.COMMAND_STRING_START, 0); }
		public ITerminalNode STRING() { return GetToken(MurMurParser.STRING, 0); }
		public ITerminalNode COMMAND_STRING_END() { return GetToken(MurMurParser.COMMAND_STRING_END, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(COMMAND_STRING_START);
			State = 243; Match(STRING);
			State = 244; Match(COMMAND_STRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodOrVariableExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public MethodOrVariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMethodOrVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMethodOrVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodOrVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD_SUB_SIGNAL() { return GetToken(MurMurParser.ADD_SUB_SIGNAL, 0); }
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpressionContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(MurMurParser.NUMBER, 0); }
		public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterNumberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitNumberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public ITerminalNode ASSIGN_SIGNAL() { return GetToken(MurMurParser.ASSIGN_SIGNAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterAssignExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitAssignExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparissonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMPARISSON_SIGNAL() { return GetToken(MurMurParser.COMPARISSON_SIGNAL, 0); }
		public ComparissonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterComparissonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitComparissonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparissonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(MurMurParser.WORD, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public MethodExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMethodExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriorityExpressionContext : ExpressionContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(MurMurParser.OPEN_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(MurMurParser.CLOSE_PAREN, 0); }
		public PriorityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPriorityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPriorityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL_DIV_SIGNAL() { return GetToken(MurMurParser.MUL_DIV_SIGNAL, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ITerminalNode TRUE() { return GetToken(MurMurParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MurMurParser.FALSE, 0); }
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				_localctx = new NumberExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 247; Match(NUMBER);
				}
				break;

			case 2:
				{
				_localctx = new MethodOrVariableExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 248; Match(WORD);
				}
				break;

			case 3:
				{
				_localctx = new MethodExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 249; Match(WORD);
				State = 252;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					State = 250; Match(COMMAND_PARAMS_START);
					State = 251; @params();
					}
					break;
				}
				}
				break;

			case 4:
				{
				_localctx = new BooleanExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 254;
				_la = _input.La(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				{
				_localctx = new StringExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 255; @string();
				}
				break;

			case 6:
				{
				_localctx = new PriorityExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 256; Match(OPEN_PAREN);
				State = 257; expression(0);
				State = 258; Match(CLOSE_PAREN);
				}
				break;

			case 7:
				{
				_localctx = new AssignExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 260; Match(WORD);
				State = 261; Match(ASSIGN_SIGNAL);
				State = 262; expression(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 279;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 277;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 265;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 266; Match(MUL_DIV_SIGNAL);
						State = 267; expression(7);
						}
						break;

					case 2:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 268;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 269; Match(MUL_DIV_SIGNAL);
						State = 270; expression(5);
						}
						break;

					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 271;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 272; Match(ADD_SUB_SIGNAL);
						State = 273; expression(4);
						}
						break;

					case 4:
						{
						_localctx = new ComparissonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 274;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 275; Match(COMPARISSON_SIGNAL);
						State = 276; expression(3);
						}
						break;
					}
					} 
				}
				State = 281;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMAND_PARAMS_SEPARATOR() { return GetTokens(MurMurParser.COMMAND_PARAMS_SEPARATOR); }
		public ITerminalNode COMMAND_PARAMS_SEPARATOR(int i) {
			return GetToken(MurMurParser.COMMAND_PARAMS_SEPARATOR, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; expression(0);
			State = 287;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 283; Match(COMMAND_PARAMS_SEPARATOR);
					State = 284; expression(0);
					}
					} 
				}
				State = 289;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_PICK() { return GetToken(MurMurParser.KEYWORD_PICK, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public PickCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickCommandContext pickCommand() {
		PickCommandContext _localctx = new PickCommandContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_pickCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(COMMAND_START);
			State = 291; Match(KEYWORD_PICK);
			State = 292; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickThisCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_PICK_THIS() { return GetToken(MurMurParser.KEYWORD_PICK_THIS, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ITerminalNode NUMBER() { return GetToken(MurMurParser.NUMBER, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public PickThisCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickThisCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterPickThisCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitPickThisCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickThisCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickThisCommandContext pickThisCommand() {
		PickThisCommandContext _localctx = new PickThisCommandContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_pickThisCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; Match(COMMAND_START);
			State = 295; Match(KEYWORD_PICK_THIS);
			State = 296; Match(COMMAND_PARAMS_START);
			State = 297; Match(NUMBER);
			State = 298; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_MENU() { return GetToken(MurMurParser.KEYWORD_MENU, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MenuCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuCommandContext menuCommand() {
		MenuCommandContext _localctx = new MenuCommandContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_menuCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(COMMAND_START);
			State = 301; Match(KEYWORD_MENU);
			State = 304;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMAND_PARAMS_START) {
				{
				State = 302; Match(COMMAND_PARAMS_START);
				State = 303; expression(0);
				}
			}

			State = 306; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuOptionCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_MENU_OPTION() { return GetToken(MurMurParser.KEYWORD_MENU_OPTION, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ITerminalNode COMMAND_PARAMS_SEPARATOR() { return GetToken(MurMurParser.COMMAND_PARAMS_SEPARATOR, 0); }
		public MenuOptionCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menuOptionCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterMenuOptionCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitMenuOptionCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenuOptionCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuOptionCommandContext menuOptionCommand() {
		MenuOptionCommandContext _localctx = new MenuOptionCommandContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_menuOptionCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(COMMAND_START);
			State = 309; Match(KEYWORD_MENU_OPTION);
			State = 310; Match(COMMAND_PARAMS_START);
			State = 311; expression(0);
			State = 314;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMAND_PARAMS_SEPARATOR) {
				{
				State = 312; Match(COMMAND_PARAMS_SEPARATOR);
				State = 313; expression(0);
				}
			}

			State = 316; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_IF() { return GetToken(MurMurParser.KEYWORD_IF, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterIfCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitIfCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_ifCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(COMMAND_START);
			State = 319; Match(KEYWORD_IF);
			State = 320; Match(COMMAND_PARAMS_START);
			State = 321; expression(0);
			State = 322; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_ELSE() { return GetToken(MurMurParser.KEYWORD_ELSE, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public ElseCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterElseCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitElseCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseCommandContext elseCommand() {
		ElseCommandContext _localctx = new ElseCommandContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_elseCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(COMMAND_START);
			State = 325; Match(KEYWORD_ELSE);
			State = 326; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndCommandContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(MurMurParser.COMMAND_START, 0); }
		public ITerminalNode KEYWORD_END() { return GetToken(MurMurParser.KEYWORD_END, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(MurMurParser.COMMAND_END, 0); }
		public EndCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterEndCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitEndCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndCommandContext endCommand() {
		EndCommandContext _localctx = new EndCommandContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_endCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(COMMAND_START);
			State = 329; Match(KEYWORD_END);
			State = 330; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode INCLUDE_KEYWORD() { return GetToken(MurMurParser.INCLUDE_KEYWORD, 0); }
		public ITerminalNode COMMAND_PARAMS_START() { return GetToken(MurMurParser.COMMAND_PARAMS_START, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode[] COMMAND_NEWLINE() { return GetTokens(MurMurParser.COMMAND_NEWLINE); }
		public ITerminalNode COMMAND_NEWLINE(int i) {
			return GetToken(MurMurParser.COMMAND_NEWLINE, i);
		}
		public ITerminalNode NEW_TAG() { return GetToken(MurMurParser.NEW_TAG, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMurMurParserListener typedListener = listener as IMurMurParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMurMurParserVisitor<TResult> typedVisitor = visitor as IMurMurParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(INCLUDE_KEYWORD);
			State = 333; Match(COMMAND_PARAMS_START);
			State = 334; @string();
			State = 338;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMAND_NEWLINE) {
				{
				{
				State = 335; Match(COMMAND_NEWLINE);
				}
				}
				State = 340;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 342;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NEW_TAG) {
				{
				State = 341; Match(NEW_TAG);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 4);

		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\'\x15B\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\a\x2\x38\n\x2\f\x2\xE\x2;\v\x2\x3\x2\x3\x2\x6\x2?\n\x2\r"+
		"\x2\xE\x2@\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3H\n\x3\f\x3\xE\x3K\v\x3\x3"+
		"\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x6\x4S\n\x4\r\x4\xE\x4T\x3\x5\x3\x5"+
		"\a\x5Y\n\x5\f\x5\xE\x5\\\v\x5\x3\x5\x6\x5_\n\x5\r\x5\xE\x5`\x3\x5\x3\x5"+
		"\x6\x5\x65\n\x5\r\x5\xE\x5\x66\x3\x5\x5\x5j\n\x5\x3\x6\x3\x6\a\x6n\n\x6"+
		"\f\x6\xE\x6q\v\x6\x3\x6\x6\x6t\n\x6\r\x6\xE\x6u\x3\x6\x3\x6\x6\x6z\n\x6"+
		"\r\x6\xE\x6{\x3\x6\x5\x6\x7F\n\x6\x3\a\x3\a\x6\a\x83\n\a\r\a\xE\a\x84"+
		"\x3\a\x3\a\x3\a\x6\a\x8A\n\a\r\a\xE\a\x8B\x3\a\x3\a\x5\a\x90\n\a\x3\a"+
		"\x3\a\x6\a\x94\n\a\r\a\xE\a\x95\x3\a\x5\a\x99\n\a\x3\b\x6\b\x9C\n\b\r"+
		"\b\xE\b\x9D\x3\b\x6\b\xA1\n\b\r\b\xE\b\xA2\x3\b\x5\b\xA6\n\b\x3\t\x3\t"+
		"\x3\t\x3\t\x5\t\xAC\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xB3\n\n\x3\n\x3"+
		"\n\x3\v\x6\v\xB8\n\v\r\v\xE\v\xB9\x3\f\x6\f\xBD\n\f\r\f\xE\f\xBE\x3\r"+
		"\x3\r\a\r\xC3\n\r\f\r\xE\r\xC6\v\r\x3\r\x5\r\xC9\n\r\x3\xE\x3\xE\a\xE"+
		"\xCD\n\xE\f\xE\xE\xE\xD0\v\xE\x3\xE\a\xE\xD3\n\xE\f\xE\xE\xE\xD6\v\xE"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\a\x10\xDE\n\x10\f\x10\xE\x10\xE1"+
		"\v\x10\x3\x10\x3\x10\x6\x10\xE5\n\x10\r\x10\xE\x10\xE6\x6\x10\xE9\n\x10"+
		"\r\x10\xE\x10\xEA\x3\x10\a\x10\xEE\n\x10\f\x10\xE\x10\xF1\v\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x5\x12\xFF\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x5\x12\x10A\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x118\n\x12\f\x12"+
		"\xE\x12\x11B\v\x12\x3\x13\x3\x13\x3\x13\a\x13\x120\n\x13\f\x13\xE\x13"+
		"\x123\v\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x133\n\x16\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x13D\n\x17\x3\x17\x3"+
		"\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x153"+
		"\n\x1B\f\x1B\xE\x1B\x156\v\x1B\x3\x1B\x5\x1B\x159\n\x1B\x3\x1B\x2\x2\x3"+
		"\"\x1C\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16"+
		"\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2"+
		"\x32\x2\x34\x2\x2\x3\x3\x2\x1E\x1F\x176\x2\x39\x3\x2\x2\x2\x4\x44\x3\x2"+
		"\x2\x2\x6R\x3\x2\x2\x2\bV\x3\x2\x2\x2\nk\x3\x2\x2\x2\f\x80\x3\x2\x2\x2"+
		"\xE\x9B\x3\x2\x2\x2\x10\xAB\x3\x2\x2\x2\x12\xAD\x3\x2\x2\x2\x14\xB7\x3"+
		"\x2\x2\x2\x16\xBC\x3\x2\x2\x2\x18\xC0\x3\x2\x2\x2\x1A\xCA\x3\x2\x2\x2"+
		"\x1C\xD7\x3\x2\x2\x2\x1E\xDB\x3\x2\x2\x2 \xF4\x3\x2\x2\x2\"\x109\x3\x2"+
		"\x2\x2$\x11C\x3\x2\x2\x2&\x124\x3\x2\x2\x2(\x128\x3\x2\x2\x2*\x12E\x3"+
		"\x2\x2\x2,\x136\x3\x2\x2\x2.\x140\x3\x2\x2\x2\x30\x146\x3\x2\x2\x2\x32"+
		"\x14A\x3\x2\x2\x2\x34\x14E\x3\x2\x2\x2\x36\x38\a\x4\x2\x2\x37\x36\x3\x2"+
		"\x2\x2\x38;\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:>\x3\x2\x2"+
		"\x2;\x39\x3\x2\x2\x2<?\x5\x4\x3\x2=?\x5\x34\x1B\x2><\x3\x2\x2\x2>=\x3"+
		"\x2\x2\x2?@\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\x42\x3\x2\x2"+
		"\x2\x42\x43\a\x2\x2\x3\x43\x3\x3\x2\x2\x2\x44\x45\a\a\x2\x2\x45I\a\n\x2"+
		"\x2\x46H\a\x4\x2\x2G\x46\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3"+
		"\x2\x2\x2JL\x3\x2\x2\x2KI\x3\x2\x2\x2LM\x5\x6\x4\x2M\x5\x3\x2\x2\x2NS"+
		"\x5\f\a\x2OS\x5\b\x5\x2PS\x5\n\x6\x2QS\x5\xE\b\x2RN\x3\x2\x2\x2RO\x3\x2"+
		"\x2\x2RP\x3\x2\x2\x2RQ\x3\x2\x2\x2ST\x3\x2\x2\x2TR\x3\x2\x2\x2TU\x3\x2"+
		"\x2\x2U\a\x3\x2\x2\x2VZ\x5&\x14\x2WY\a\x4\x2\x2XW\x3\x2\x2\x2Y\\\x3\x2"+
		"\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[^\x3\x2\x2\x2\\Z\x3\x2\x2\x2]_\x5\x1A"+
		"\xE\x2^]\x3\x2\x2\x2_`\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61"+
		"\x62\x3\x2\x2\x2\x62i\x5\x32\x1A\x2\x63\x65\a\x4\x2\x2\x64\x63\x3\x2\x2"+
		"\x2\x65\x66\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gj\x3\x2\x2"+
		"\x2hj\a\x2\x2\x3i\x64\x3\x2\x2\x2ih\x3\x2\x2\x2j\t\x3\x2\x2\x2ko\x5*\x16"+
		"\x2ln\a\x4\x2\x2ml\x3\x2\x2\x2nq\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2\x2"+
		"\x2ps\x3\x2\x2\x2qo\x3\x2\x2\x2rt\x5\x18\r\x2sr\x3\x2\x2\x2tu\x3\x2\x2"+
		"\x2us\x3\x2\x2\x2uv\x3\x2\x2\x2vw\x3\x2\x2\x2w~\x5\x32\x1A\x2xz\a\x4\x2"+
		"\x2yx\x3\x2\x2\x2z{\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|\x7F\x3\x2"+
		"\x2\x2}\x7F\a\x2\x2\x3~y\x3\x2\x2\x2~}\x3\x2\x2\x2\x7F\v\x3\x2\x2\x2\x80"+
		"\x82\x5.\x18\x2\x81\x83\a\x4\x2\x2\x82\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2"+
		"\x2\x84\x82\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x8F"+
		"\x5\x6\x4\x2\x87\x89\x5\x30\x19\x2\x88\x8A\a\x4\x2\x2\x89\x88\x3\x2\x2"+
		"\x2\x8A\x8B\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D"+
		"\x3\x2\x2\x2\x8D\x8E\x5\x6\x4\x2\x8E\x90\x3\x2\x2\x2\x8F\x87\x3\x2\x2"+
		"\x2\x8F\x90\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x98\x5\x32\x1A\x2\x92"+
		"\x94\a\x4\x2\x2\x93\x92\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x93\x3\x2"+
		"\x2\x2\x95\x96\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2\x97\x99\a\x2\x2\x3\x98"+
		"\x93\x3\x2\x2\x2\x98\x97\x3\x2\x2\x2\x99\r\x3\x2\x2\x2\x9A\x9C\x5\x10"+
		"\t\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D"+
		"\x9E\x3\x2\x2\x2\x9E\xA5\x3\x2\x2\x2\x9F\xA1\a\x4\x2\x2\xA0\x9F\x3\x2"+
		"\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3"+
		"\xA6\x3\x2\x2\x2\xA4\xA6\a\x2\x2\x3\xA5\xA0\x3\x2\x2\x2\xA5\xA4\x3\x2"+
		"\x2\x2\xA6\xF\x3\x2\x2\x2\xA7\xAC\a\n\x2\x2\xA8\xAC\x5\x12\n\x2\xA9\xAC"+
		"\x5\x1C\xF\x2\xAA\xAC\x5\x1E\x10\x2\xAB\xA7\x3\x2\x2\x2\xAB\xA8\x3\x2"+
		"\x2\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAA\x3\x2\x2\x2\xAC\x11\x3\x2\x2\x2\xAD"+
		"\xAE\x5.\x18\x2\xAE\xB2\x5\x14\v\x2\xAF\xB0\x5\x30\x19\x2\xB0\xB1\x5\x16"+
		"\f\x2\xB1\xB3\x3\x2\x2\x2\xB2\xAF\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3"+
		"\xB4\x3\x2\x2\x2\xB4\xB5\x5\x32\x1A\x2\xB5\x13\x3\x2\x2\x2\xB6\xB8\x5"+
		"\x10\t\x2\xB7\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2"+
		"\xB9\xBA\x3\x2\x2\x2\xBA\x15\x3\x2\x2\x2\xBB\xBD\x5\x10\t\x2\xBC\xBB\x3"+
		"\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2"+
		"\xBF\x17\x3\x2\x2\x2\xC0\xC4\x5,\x17\x2\xC1\xC3\a\x4\x2\x2\xC2\xC1\x3"+
		"\x2\x2\x2\xC3\xC6\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2"+
		"\xC5\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC7\xC9\x5\x6\x4\x2\xC8\xC7\x3"+
		"\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\x19\x3\x2\x2\x2\xCA\xCE\x5(\x15\x2\xCB"+
		"\xCD\a\x4\x2\x2\xCC\xCB\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2"+
		"\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD4\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1"+
		"\xD3\x5\x6\x4\x2\xD2\xD1\x3\x2\x2\x2\xD3\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2"+
		"\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\x1B\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD7"+
		"\xD8\a\b\x2\x2\xD8\xD9\x5\"\x12\x2\xD9\xDA\a\x15\x2\x2\xDA\x1D\x3\x2\x2"+
		"\x2\xDB\xDF\a\b\x2\x2\xDC\xDE\a\f\x2\x2\xDD\xDC\x3\x2\x2\x2\xDE\xE1\x3"+
		"\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE8\x3\x2\x2\x2"+
		"\xE1\xDF\x3\x2\x2\x2\xE2\xE4\x5\"\x12\x2\xE3\xE5\a\f\x2\x2\xE4\xE3\x3"+
		"\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2"+
		"\xE7\xE9\x3\x2\x2\x2\xE8\xE2\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xE8\x3"+
		"\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEF\x3\x2\x2\x2\xEC\xEE\a\f\x2\x2\xED"+
		"\xEC\x3\x2\x2\x2\xEE\xF1\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3\x2"+
		"\x2\x2\xF0\xF2\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF2\xF3\a\x15\x2\x2\xF3"+
		"\x1F\x3\x2\x2\x2\xF4\xF5\a\x11\x2\x2\xF5\xF6\a&\x2\x2\xF6\xF7\a\'\x2\x2"+
		"\xF7!\x3\x2\x2\x2\xF8\xF9\b\x12\x1\x2\xF9\x10A\a \x2\x2\xFA\x10A\a!\x2"+
		"\x2\xFB\xFE\a!\x2\x2\xFC\xFD\a\x10\x2\x2\xFD\xFF\x5$\x13\x2\xFE\xFC\x3"+
		"\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x10A\x3\x2\x2\x2\x100\x10A\t\x2\x2\x2"+
		"\x101\x10A\x5 \x11\x2\x102\x103\a\x12\x2\x2\x103\x104\x5\"\x12\x2\x104"+
		"\x105\a\x13\x2\x2\x105\x10A\x3\x2\x2\x2\x106\x107\a!\x2\x2\x107\x108\a"+
		"\"\x2\x2\x108\x10A\x5\"\x12\x3\x109\xF8\x3\x2\x2\x2\x109\xFA\x3\x2\x2"+
		"\x2\x109\xFB\x3\x2\x2\x2\x109\x100\x3\x2\x2\x2\x109\x101\x3\x2\x2\x2\x109"+
		"\x102\x3\x2\x2\x2\x109\x106\x3\x2\x2\x2\x10A\x119\x3\x2\x2\x2\x10B\x10C"+
		"\f\b\x2\x2\x10C\x10D\a$\x2\x2\x10D\x118\x5\"\x12\t\x10E\x10F\f\x6\x2\x2"+
		"\x10F\x110\a$\x2\x2\x110\x118\x5\"\x12\a\x111\x112\f\x5\x2\x2\x112\x113"+
		"\a%\x2\x2\x113\x118\x5\"\x12\x6\x114\x115\f\x4\x2\x2\x115\x116\a#\x2\x2"+
		"\x116\x118\x5\"\x12\x5\x117\x10B\x3\x2\x2\x2\x117\x10E\x3\x2\x2\x2\x117"+
		"\x111\x3\x2\x2\x2\x117\x114\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119\x117"+
		"\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A#\x3\x2\x2\x2\x11B\x119\x3\x2\x2"+
		"\x2\x11C\x121\x5\"\x12\x2\x11D\x11E\a\x14\x2\x2\x11E\x120\x5\"\x12\x2"+
		"\x11F\x11D\x3\x2\x2\x2\x120\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121"+
		"\x122\x3\x2\x2\x2\x122%\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124\x125\a"+
		"\b\x2\x2\x125\x126\a\x1C\x2\x2\x126\x127\a\x15\x2\x2\x127\'\x3\x2\x2\x2"+
		"\x128\x129\a\b\x2\x2\x129\x12A\a\x1D\x2\x2\x12A\x12B\a\x10\x2\x2\x12B"+
		"\x12C\a \x2\x2\x12C\x12D\a\x15\x2\x2\x12D)\x3\x2\x2\x2\x12E\x12F\a\b\x2"+
		"\x2\x12F\x132\a\x1A\x2\x2\x130\x131\a\x10\x2\x2\x131\x133\x5\"\x12\x2"+
		"\x132\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134"+
		"\x135\a\x15\x2\x2\x135+\x3\x2\x2\x2\x136\x137\a\b\x2\x2\x137\x138\a\x1B"+
		"\x2\x2\x138\x139\a\x10\x2\x2\x139\x13C\x5\"\x12\x2\x13A\x13B\a\x14\x2"+
		"\x2\x13B\x13D\x5\"\x12\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2"+
		"\x13D\x13E\x3\x2\x2\x2\x13E\x13F\a\x15\x2\x2\x13F-\x3\x2\x2\x2\x140\x141"+
		"\a\b\x2\x2\x141\x142\a\x16\x2\x2\x142\x143\a\x10\x2\x2\x143\x144\x5\""+
		"\x12\x2\x144\x145\a\x15\x2\x2\x145/\x3\x2\x2\x2\x146\x147\a\b\x2\x2\x147"+
		"\x148\a\x17\x2\x2\x148\x149\a\x15\x2\x2\x149\x31\x3\x2\x2\x2\x14A\x14B"+
		"\a\b\x2\x2\x14B\x14C\a\x18\x2\x2\x14C\x14D\a\x15\x2\x2\x14D\x33\x3\x2"+
		"\x2\x2\x14E\x14F\a\t\x2\x2\x14F\x150\a\x10\x2\x2\x150\x154\x5 \x11\x2"+
		"\x151\x153\a\f\x2\x2\x152\x151\x3\x2\x2\x2\x153\x156\x3\x2\x2\x2\x154"+
		"\x152\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154"+
		"\x3\x2\x2\x2\x157\x159\a\v\x2\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2"+
		"\x2\x2\x159\x35\x3\x2\x2\x2-\x39>@IRTZ`\x66iou{~\x84\x8B\x8F\x95\x98\x9D"+
		"\xA2\xA5\xAB\xB2\xB9\xBE\xC4\xC8\xCE\xD4\xDF\xE6\xEA\xEF\xFE\x109\x117"+
		"\x119\x121\x132\x13C\x154\x158";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MurMur.Grammar
