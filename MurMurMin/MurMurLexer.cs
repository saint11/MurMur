//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\dev\murmur\MurMur\MurMur\Grammar\MurMurLexer.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MurMur.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class MurMurLexer : Lexer {
	public const int
		WHITESPACE=1, NEWLINE=2, LINE_COMMENT=3, TAG_START=4, COMMAND_START=5, 
		FAST_PICK_START=6, TEXT=7, COMMAND_IGNORE=8, COMMAND_PARAMS_START=9, COMMAND_STRING_START=10, 
		COMMAND_PARAMS_SEPARATOR=11, COMMAND_END=12, KEYWORD_IF=13, KEYWORD_ELSE=14, 
		KEYWORD_END=15, KEYWORD_GOTO=16, KEYWORD_MENU=17, KEYWORD_MENU_OPTION=18, 
		KEYWORD_PICK=19, KEYWORD_PICK_THIS=20, TRUE=21, FALSE=22, NUMBER=23, INT=24, 
		WORD=25, ASSIGN_SIGNAL=26, COMPARISSON_SIGNAL=27, MUL_DIV_SIGNAL=28, ADD_SUB_SIGNAL=29, 
		SUB_TEXT_SEPARATOR=30, FAST_PICK_TEXT=31, FAST_PICK_END=32, STRING=33, 
		COMMAND_STRING_END=34;
	public const int INSIDE_COMMAND = 1;
	public const int FAST_PICK = 2;
	public const int STRING_MODE = 3;
	public static string[] modeNames = {
		"DEFAULT_MODE", "INSIDE_COMMAND", "FAST_PICK", "STRING_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOWERCASE", "UPPERCASE", "COMMENT_ESCAPE", "DIGIT", "WHITESPACE", "NEWLINE", 
		"LINE_COMMENT", "TAG_START", "COMMAND_START", "FAST_PICK_START", "TEXT", 
		"COMMAND_IGNORE", "COMMAND_PARAMS_START", "COMMAND_STRING_START", "COMMAND_PARAMS_SEPARATOR", 
		"COMMAND_END", "T", "R", "U", "E", "F", "A", "L", "S", "KEYWORD_IF", "KEYWORD_ELSE", 
		"KEYWORD_END", "KEYWORD_GOTO", "KEYWORD_MENU", "KEYWORD_MENU_OPTION", 
		"KEYWORD_PICK", "KEYWORD_PICK_THIS", "TRUE", "FALSE", "NUMBER", "INT", 
		"WORD", "ASSIGN_SIGNAL", "COMPARISSON_SIGNAL", "MUL_DIV_SIGNAL", "ADD_SUB_SIGNAL", 
		"SUB_TEXT_SEPARATOR", "FAST_PICK_TEXT", "FAST_PICK_END", "STRING", "COMMAND_STRING_END"
	};


	public MurMurLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "NEWLINE", "LINE_COMMENT", "TAG_START", "COMMAND_START", 
		"FAST_PICK_START", "TEXT", "COMMAND_IGNORE", "COMMAND_PARAMS_START", "COMMAND_STRING_START", 
		"COMMAND_PARAMS_SEPARATOR", "COMMAND_END", "KEYWORD_IF", "KEYWORD_ELSE", 
		"KEYWORD_END", "KEYWORD_GOTO", "KEYWORD_MENU", "KEYWORD_MENU_OPTION", 
		"KEYWORD_PICK", "KEYWORD_PICK_THIS", "TRUE", "FALSE", "NUMBER", "INT", 
		"WORD", "ASSIGN_SIGNAL", "COMPARISSON_SIGNAL", "MUL_DIV_SIGNAL", "ADD_SUB_SIGNAL", 
		"SUB_TEXT_SEPARATOR", "FAST_PICK_TEXT", "FAST_PICK_END", "STRING", "COMMAND_STRING_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MurMurLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2$\x12A\b\x1\b\x1"+
		"\b\x1\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a"+
		"\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE"+
		"\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14"+
		"\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19"+
		"\x4\x1A\t\x1A\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F"+
		"\t\x1F\x4 \t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4"+
		"(\t(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x6\x6m\n\x6\r\x6\xE\x6n\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\x6\av\n\a\r\a\xE\aw\x3\b\x3\b\x3\b\x3\b\a\b~"+
		"\n\b\f\b\xE\b\x81\v\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3"+
		"\v\x3\v\x3\v\x3\f\x3\f\x3\f\x6\f\x92\n\f\r\f\xE\f\x93\x3\r\x3\r\x3\r\x6"+
		"\r\x99\n\r\r\r\xE\r\x9A\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3"+
		" \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3$\x6$\xEC\n$\r$\xE$\xED\x3$\x3$\x6$\xF2\n$\r$\xE$\xF3"+
		"\x5$\xF6\n$\x3%\x6%\xF9\n%\r%\xE%\xFA\x3&\x3&\x3&\x6&\x100\n&\r&\xE&\x101"+
		"\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x10F\n(\x3)\x3)\x3"+
		"*\x3*\x3+\x3+\x3,\x3,\x3,\x6,\x11A\n,\r,\xE,\x11B\x3-\x3-\x3-\x3-\x3."+
		"\x6.\x123\n.\r.\xE.\x124\x3/\x3/\x3/\x3/\x2\x2\x2\x30\x6\x2\x2\b\x2\x2"+
		"\n\x2\x2\f\x2\x2\xE\x2\x3\x10\x2\x4\x12\x2\x5\x14\x2\x6\x16\x2\a\x18\x2"+
		"\b\x1A\x2\t\x1C\x2\n\x1E\x2\v \x2\f\"\x2\r$\x2\xE&\x2\x2(\x2\x2*\x2\x2"+
		",\x2\x2.\x2\x2\x30\x2\x2\x32\x2\x2\x34\x2\x2\x36\x2\xF\x38\x2\x10:\x2"+
		"\x11<\x2\x12>\x2\x13@\x2\x14\x42\x2\x15\x44\x2\x16\x46\x2\x17H\x2\x18"+
		"J\x2\x19L\x2\x1AN\x2\x1BP\x2\x1CR\x2\x1DT\x2\x1EV\x2\x1FX\x2 Z\x2!\\\x2"+
		"\"^\x2#`\x2$\x6\x2\x3\x4\x5\x18\x3\x2\x63|\x3\x2\x43\\\x3\x2\x32;\x4\x2"+
		"\v\v\"\"\x4\x2\f\f\xF\xF\t\x2\f\f\xF\xF%%\x31\x31\x42\x42]]}}\x3\x2\x31"+
		"\x31\x5\x2\v\f\xF\xF\"\"\x4\x2VVvv\x4\x2TTtt\x4\x2WWww\x4\x2GGgg\x4\x2"+
		"HHhh\x4\x2\x43\x43\x63\x63\x4\x2NNnn\x4\x2UUuu\x4\x2..\x30\x30\x4\x2>"+
		">@@\x4\x2,,\x31\x31\x4\x2--//\a\x2\f\f\xF\xF\x31\x31__~\x7F\x3\x2__\x130"+
		"\x2\xE\x3\x2\x2\x2\x2\x10\x3\x2\x2\x2\x2\x12\x3\x2\x2\x2\x2\x14\x3\x2"+
		"\x2\x2\x2\x16\x3\x2\x2\x2\x2\x18\x3\x2\x2\x2\x2\x1A\x3\x2\x2\x2\x3\x1C"+
		"\x3\x2\x2\x2\x3\x1E\x3\x2\x2\x2\x3 \x3\x2\x2\x2\x3\"\x3\x2\x2\x2\x3$\x3"+
		"\x2\x2\x2\x3\x36\x3\x2\x2\x2\x3\x38\x3\x2\x2\x2\x3:\x3\x2\x2\x2\x3<\x3"+
		"\x2\x2\x2\x3>\x3\x2\x2\x2\x3@\x3\x2\x2\x2\x3\x42\x3\x2\x2\x2\x3\x44\x3"+
		"\x2\x2\x2\x3\x46\x3\x2\x2\x2\x3H\x3\x2\x2\x2\x3J\x3\x2\x2\x2\x3L\x3\x2"+
		"\x2\x2\x3N\x3\x2\x2\x2\x3P\x3\x2\x2\x2\x3R\x3\x2\x2\x2\x3T\x3\x2\x2\x2"+
		"\x3V\x3\x2\x2\x2\x4X\x3\x2\x2\x2\x4Z\x3\x2\x2\x2\x4\\\x3\x2\x2\x2\x5^"+
		"\x3\x2\x2\x2\x5`\x3\x2\x2\x2\x6\x62\x3\x2\x2\x2\b\x64\x3\x2\x2\x2\n\x66"+
		"\x3\x2\x2\x2\fi\x3\x2\x2\x2\xEl\x3\x2\x2\x2\x10u\x3\x2\x2\x2\x12y\x3\x2"+
		"\x2\x2\x14\x84\x3\x2\x2\x2\x16\x86\x3\x2\x2\x2\x18\x8A\x3\x2\x2\x2\x1A"+
		"\x91\x3\x2\x2\x2\x1C\x98\x3\x2\x2\x2\x1E\x9E\x3\x2\x2\x2 \xA0\x3\x2\x2"+
		"\x2\"\xA4\x3\x2\x2\x2$\xA6\x3\x2\x2\x2&\xAA\x3\x2\x2\x2(\xAC\x3\x2\x2"+
		"\x2*\xAE\x3\x2\x2\x2,\xB0\x3\x2\x2\x2.\xB2\x3\x2\x2\x2\x30\xB4\x3\x2\x2"+
		"\x2\x32\xB6\x3\x2\x2\x2\x34\xB8\x3\x2\x2\x2\x36\xBA\x3\x2\x2\x2\x38\xBD"+
		"\x3\x2\x2\x2:\xC2\x3\x2\x2\x2<\xC6\x3\x2\x2\x2>\xC9\x3\x2\x2\x2@\xCE\x3"+
		"\x2\x2\x2\x42\xD5\x3\x2\x2\x2\x44\xDA\x3\x2\x2\x2\x46\xDF\x3\x2\x2\x2"+
		"H\xE4\x3\x2\x2\x2J\xEB\x3\x2\x2\x2L\xF8\x3\x2\x2\x2N\xFF\x3\x2\x2\x2P"+
		"\x103\x3\x2\x2\x2R\x10E\x3\x2\x2\x2T\x110\x3\x2\x2\x2V\x112\x3\x2\x2\x2"+
		"X\x114\x3\x2\x2\x2Z\x119\x3\x2\x2\x2\\\x11D\x3\x2\x2\x2^\x122\x3\x2\x2"+
		"\x2`\x126\x3\x2\x2\x2\x62\x63\t\x2\x2\x2\x63\a\x3\x2\x2\x2\x64\x65\t\x3"+
		"\x2\x2\x65\t\x3\x2\x2\x2\x66g\a\x31\x2\x2gh\a\x31\x2\x2h\v\x3\x2\x2\x2"+
		"ij\t\x4\x2\x2j\r\x3\x2\x2\x2km\t\x5\x2\x2lk\x3\x2\x2\x2mn\x3\x2\x2\x2"+
		"nl\x3\x2\x2\x2no\x3\x2\x2\x2op\x3\x2\x2\x2pq\b\x6\x2\x2q\xF\x3\x2\x2\x2"+
		"rv\t\x6\x2\x2st\a\xF\x2\x2tv\a\f\x2\x2ur\x3\x2\x2\x2us\x3\x2\x2\x2vw\x3"+
		"\x2\x2\x2wu\x3\x2\x2\x2wx\x3\x2\x2\x2x\x11\x3\x2\x2\x2yz\a\x31\x2\x2z"+
		"{\a\x31\x2\x2{\x7F\x3\x2\x2\x2|~\n\x6\x2\x2}|\x3\x2\x2\x2~\x81\x3\x2\x2"+
		"\x2\x7F}\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x82\x3\x2\x2\x2\x81\x7F\x3"+
		"\x2\x2\x2\x82\x83\b\b\x3\x2\x83\x13\x3\x2\x2\x2\x84\x85\a%\x2\x2\x85\x15"+
		"\x3\x2\x2\x2\x86\x87\a}\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89\b\n\x4\x2\x89"+
		"\x17\x3\x2\x2\x2\x8A\x8B\a]\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\b\v\x5\x2"+
		"\x8D\x19\x3\x2\x2\x2\x8E\x92\n\a\x2\x2\x8F\x90\a\x31\x2\x2\x90\x92\n\b"+
		"\x2\x2\x91\x8E\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93"+
		"\x91\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x1B\x3\x2\x2\x2\x95\x99\t\t\x2"+
		"\x2\x96\x97\a\xF\x2\x2\x97\x99\a\f\x2\x2\x98\x95\x3\x2\x2\x2\x98\x96\x3"+
		"\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2"+
		"\x9B\x9C\x3\x2\x2\x2\x9C\x9D\b\r\x2\x2\x9D\x1D\x3\x2\x2\x2\x9E\x9F\a<"+
		"\x2\x2\x9F\x1F\x3\x2\x2\x2\xA0\xA1\a]\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA3"+
		"\b\xF\x6\x2\xA3!\x3\x2\x2\x2\xA4\xA5\a.\x2\x2\xA5#\x3\x2\x2\x2\xA6\xA7"+
		"\a\x7F\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\b\x11\a\x2\xA9%\x3\x2\x2\x2\xAA"+
		"\xAB\t\n\x2\x2\xAB\'\x3\x2\x2\x2\xAC\xAD\t\v\x2\x2\xAD)\x3\x2\x2\x2\xAE"+
		"\xAF\t\f\x2\x2\xAF+\x3\x2\x2\x2\xB0\xB1\t\r\x2\x2\xB1-\x3\x2\x2\x2\xB2"+
		"\xB3\t\xE\x2\x2\xB3/\x3\x2\x2\x2\xB4\xB5\t\xF\x2\x2\xB5\x31\x3\x2\x2\x2"+
		"\xB6\xB7\t\x10\x2\x2\xB7\x33\x3\x2\x2\x2\xB8\xB9\t\x11\x2\x2\xB9\x35\x3"+
		"\x2\x2\x2\xBA\xBB\ak\x2\x2\xBB\xBC\ah\x2\x2\xBC\x37\x3\x2\x2\x2\xBD\xBE"+
		"\ag\x2\x2\xBE\xBF\an\x2\x2\xBF\xC0\au\x2\x2\xC0\xC1\ag\x2\x2\xC1\x39\x3"+
		"\x2\x2\x2\xC2\xC3\ag\x2\x2\xC3\xC4\ap\x2\x2\xC4\xC5\a\x66\x2\x2\xC5;\x3"+
		"\x2\x2\x2\xC6\xC7\ai\x2\x2\xC7\xC8\aq\x2\x2\xC8=\x3\x2\x2\x2\xC9\xCA\a"+
		"o\x2\x2\xCA\xCB\ag\x2\x2\xCB\xCC\ap\x2\x2\xCC\xCD\aw\x2\x2\xCD?\x3\x2"+
		"\x2\x2\xCE\xCF\aq\x2\x2\xCF\xD0\ar\x2\x2\xD0\xD1\av\x2\x2\xD1\xD2\ak\x2"+
		"\x2\xD2\xD3\aq\x2\x2\xD3\xD4\ap\x2\x2\xD4\x41\x3\x2\x2\x2\xD5\xD6\ar\x2"+
		"\x2\xD6\xD7\ak\x2\x2\xD7\xD8\a\x65\x2\x2\xD8\xD9\am\x2\x2\xD9\x43\x3\x2"+
		"\x2\x2\xDA\xDB\av\x2\x2\xDB\xDC\aj\x2\x2\xDC\xDD\ak\x2\x2\xDD\xDE\au\x2"+
		"\x2\xDE\x45\x3\x2\x2\x2\xDF\xE0\x5&\x12\x2\xE0\xE1\x5(\x13\x2\xE1\xE2"+
		"\x5*\x14\x2\xE2\xE3\x5,\x15\x2\xE3G\x3\x2\x2\x2\xE4\xE5\x5.\x16\x2\xE5"+
		"\xE6\x5\x30\x17\x2\xE6\xE7\x5\x32\x18\x2\xE7\xE8\x5\x34\x19\x2\xE8\xE9"+
		"\x5,\x15\x2\xE9I\x3\x2\x2\x2\xEA\xEC\x5\f\x5\x2\xEB\xEA\x3\x2\x2\x2\xEC"+
		"\xED\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xF5\x3\x2"+
		"\x2\x2\xEF\xF1\t\x12\x2\x2\xF0\xF2\x5\f\x5\x2\xF1\xF0\x3\x2\x2\x2\xF2"+
		"\xF3\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF6\x3\x2"+
		"\x2\x2\xF5\xEF\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6K\x3\x2\x2\x2\xF7\xF9"+
		"\x5\f\x5\x2\xF8\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2"+
		"\xFA\xFB\x3\x2\x2\x2\xFBM\x3\x2\x2\x2\xFC\x100\x5\x6\x2\x2\xFD\x100\x5"+
		"\b\x3\x2\xFE\x100\a\x61\x2\x2\xFF\xFC\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2"+
		"\xFF\xFE\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102"+
		"\x3\x2\x2\x2\x102O\x3\x2\x2\x2\x103\x104\a?\x2\x2\x104Q\x3\x2\x2\x2\x105"+
		"\x106\a?\x2\x2\x106\x10F\a?\x2\x2\x107\x108\a#\x2\x2\x108\x10F\a?\x2\x2"+
		"\x109\x10F\t\x13\x2\x2\x10A\x10B\a@\x2\x2\x10B\x10F\a?\x2\x2\x10C\x10D"+
		"\a>\x2\x2\x10D\x10F\a?\x2\x2\x10E\x105\x3\x2\x2\x2\x10E\x107\x3\x2\x2"+
		"\x2\x10E\x109\x3\x2\x2\x2\x10E\x10A\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2"+
		"\x10FS\x3\x2\x2\x2\x110\x111\t\x14\x2\x2\x111U\x3\x2\x2\x2\x112\x113\t"+
		"\x15\x2\x2\x113W\x3\x2\x2\x2\x114\x115\a~\x2\x2\x115Y\x3\x2\x2\x2\x116"+
		"\x11A\n\x16\x2\x2\x117\x118\a\x31\x2\x2\x118\x11A\n\b\x2\x2\x119\x116"+
		"\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x119\x3"+
		"\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C[\x3\x2\x2\x2\x11D\x11E\a_\x2\x2\x11E"+
		"\x11F\x3\x2\x2\x2\x11F\x120\b-\a\x2\x120]\x3\x2\x2\x2\x121\x123\n\x17"+
		"\x2\x2\x122\x121\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x122\x3\x2\x2"+
		"\x2\x124\x125\x3\x2\x2\x2\x125_\x3\x2\x2\x2\x126\x127\a_\x2\x2\x127\x128"+
		"\x3\x2\x2\x2\x128\x129\b/\a\x2\x129\x61\x3\x2\x2\x2\x18\x2\x3\x4\x5nu"+
		"w\x7F\x91\x93\x98\x9A\xED\xF3\xF5\xFA\xFF\x101\x10E\x119\x11B\x124\b\b"+
		"\x2\x2\x2\x3\x2\a\x3\x2\a\x4\x2\a\x5\x2\x6\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MurMur.Grammar
