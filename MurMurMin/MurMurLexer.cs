//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\dev\murmur\MurMur\MurMur\Grammar\MurMurLexer.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MurMur.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class MurMurLexer : Lexer {
	public const int
		WHITESPACE=1, NEWLINE=2, LINE_COMMENT=3, COMMENT=4, TAG_START=5, COMMAND_START=6, 
		INCLUDE_KEYWORD=7, TEXT=8, NEW_TAG=9, COMMAND_NEWLINE=10, COMMAND_IGNORE=11, 
		COMMAND_LINE_COMMENT=12, COMMAND_COMMENT=13, COMMAND_PARAMS_START=14, 
		COMMAND_STRING_START=15, OPEN_PAREN=16, CLOSE_PAREN=17, COMMAND_PARAMS_SEPARATOR=18, 
		COMMAND_END=19, KEYWORD_IF=20, KEYWORD_ELSE=21, KEYWORD_END=22, KEYWORD_GOTO=23, 
		KEYWORD_MENU=24, KEYWORD_MENU_OPTION=25, KEYWORD_PICK=26, KEYWORD_PICK_THIS=27, 
		TRUE=28, FALSE=29, NUMBER=30, WORD=31, ASSIGN_SIGNAL=32, COMPARISSON_SIGNAL=33, 
		MUL_DIV_SIGNAL=34, ADD_SUB_SIGNAL=35, STRING=36, COMMAND_STRING_END=37;
	public const int INSIDE_COMMAND = 1;
	public const int STRING_MODE = 2;
	public static string[] modeNames = {
		"DEFAULT_MODE", "INSIDE_COMMAND", "STRING_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOWERCASE", "UPPERCASE", "DIGIT", "TAG", "WHITESPACE", "NEWLINE", "LINE_COMMENT", 
		"COMMENT", "TAG_START", "COMMAND_START", "INCLUDE_KEYWORD", "TEXT", "NEW_TAG", 
		"COMMAND_NEWLINE", "COMMAND_IGNORE", "COMMAND_LINE_COMMENT", "COMMAND_COMMENT", 
		"COMMAND_PARAMS_START", "COMMAND_STRING_START", "OPEN_PAREN", "CLOSE_PAREN", 
		"COMMAND_PARAMS_SEPARATOR", "COMMAND_END", "T", "R", "U", "E", "F", "A", 
		"L", "S", "KEYWORD_IF", "KEYWORD_ELSE", "KEYWORD_END", "KEYWORD_GOTO", 
		"KEYWORD_MENU", "KEYWORD_MENU_OPTION", "KEYWORD_PICK", "KEYWORD_PICK_THIS", 
		"TRUE", "FALSE", "NUMBER", "WORD", "ASSIGN_SIGNAL", "COMPARISSON_SIGNAL", 
		"MUL_DIV_SIGNAL", "ADD_SUB_SIGNAL", "STRING", "COMMAND_STRING_END"
	};


	public MurMurLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'@include'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "NEWLINE", "LINE_COMMENT", "COMMENT", "TAG_START", 
		"COMMAND_START", "INCLUDE_KEYWORD", "TEXT", "NEW_TAG", "COMMAND_NEWLINE", 
		"COMMAND_IGNORE", "COMMAND_LINE_COMMENT", "COMMAND_COMMENT", "COMMAND_PARAMS_START", 
		"COMMAND_STRING_START", "OPEN_PAREN", "CLOSE_PAREN", "COMMAND_PARAMS_SEPARATOR", 
		"COMMAND_END", "KEYWORD_IF", "KEYWORD_ELSE", "KEYWORD_END", "KEYWORD_GOTO", 
		"KEYWORD_MENU", "KEYWORD_MENU_OPTION", "KEYWORD_PICK", "KEYWORD_PICK_THIS", 
		"TRUE", "FALSE", "NUMBER", "WORD", "ASSIGN_SIGNAL", "COMPARISSON_SIGNAL", 
		"MUL_DIV_SIGNAL", "ADD_SUB_SIGNAL", "STRING", "COMMAND_STRING_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MurMurLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12 : return NEW_TAG_sempred(_localctx, predIndex);

		case 45 : return MUL_DIV_SIGNAL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool NEW_TAG_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return _input.La(1)=='#';
		}
		return true;
	}
	private bool MUL_DIV_SIGNAL_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return _input.La(1)!='*';

		case 2: return _input.La(1)!='/';
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\'\x166\b\x1\b\x1"+
		"\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a"+
		"\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF"+
		"\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14"+
		"\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A"+
		"\t\x1A\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F"+
		"\x4 \t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4"+
		")\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x4\x32\t\x32\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x6"+
		"\x6q\n\x6\r\x6\xE\x6r\x3\x6\x3\x6\x3\a\x3\a\x3\a\x6\az\n\a\r\a\xE\a{\x3"+
		"\b\x3\b\x3\b\x3\b\a\b\x82\n\b\f\b\xE\b\x85\v\b\x3\b\x3\b\x3\t\x3\t\x3"+
		"\t\x3\t\a\t\x8D\n\t\f\t\xE\t\x90\v\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\x6\r\xAB\n\r\r\r\xE\r\xAC\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\xB2\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x5\xF\xBB\n\xF"+
		"\x3\xF\x3\xF\x3\x10\x6\x10\xC0\n\x10\r\x10\xE\x10\xC1\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\a\x11\xCA\n\x11\f\x11\xE\x11\xCD\v\x11\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\xD5\n\x12\f\x12\xE\x12\xD8\v"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3!\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3"+
		")\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x3+\x6+\x130\n+\r+\xE+\x131"+
		"\x3+\x3+\x6+\x136\n+\r+\xE+\x137\x5+\x13A\n+\x3,\x3,\x3,\x5,\x13F\n,\x3"+
		",\x3,\x3,\x3,\x6,\x145\n,\r,\xE,\x146\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3."+
		"\x3.\x3.\x3.\x5.\x154\n.\x3/\x3/\x3/\x3/\x5/\x15A\n/\x3\x30\x3\x30\x3"+
		"\x31\x6\x31\x15F\n\x31\r\x31\xE\x31\x160\x3\x32\x3\x32\x3\x32\x3\x32\x4"+
		"\x8E\xD6\x2\x2\x33\x5\x2\x2\a\x2\x2\t\x2\x2\v\x2\x2\r\x2\x3\xF\x2\x4\x11"+
		"\x2\x5\x13\x2\x6\x15\x2\a\x17\x2\b\x19\x2\t\x1B\x2\n\x1D\x2\v\x1F\x2\f"+
		"!\x2\r#\x2\xE%\x2\xF\'\x2\x10)\x2\x11+\x2\x12-\x2\x13/\x2\x14\x31\x2\x15"+
		"\x33\x2\x2\x35\x2\x2\x37\x2\x2\x39\x2\x2;\x2\x2=\x2\x2?\x2\x2\x41\x2\x2"+
		"\x43\x2\x16\x45\x2\x17G\x2\x18I\x2\x19K\x2\x1AM\x2\x1BO\x2\x1CQ\x2\x1D"+
		"S\x2\x1EU\x2\x1FW\x2 Y\x2![\x2\"]\x2#_\x2$\x61\x2%\x63\x2&\x65\x2\'\x5"+
		"\x2\x3\x4\x16\x3\x2\x63|\x3\x2\x43\\\x3\x2\x32;\x4\x2\v\v\"\"\x4\x2\f"+
		"\f\xF\xF\t\x2\f\f\xF\xF%%\x31\x31\x42\x42]]}}\x4\x2,,\x31\x31\x3\x2%%"+
		"\x4\x2VVvv\x4\x2TTtt\x4\x2WWww\x4\x2GGgg\x4\x2HHhh\x4\x2\x43\x43\x63\x63"+
		"\x4\x2NNnn\x4\x2UUuu\x3\x2\x30\x30\x4\x2>>@@\x4\x2--//\x3\x2__\x172\x2"+
		"\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2"+
		"\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2"+
		"\x2\x2\x3\x1D\x3\x2\x2\x2\x3\x1F\x3\x2\x2\x2\x3!\x3\x2\x2\x2\x3#\x3\x2"+
		"\x2\x2\x3%\x3\x2\x2\x2\x3\'\x3\x2\x2\x2\x3)\x3\x2\x2\x2\x3+\x3\x2\x2\x2"+
		"\x3-\x3\x2\x2\x2\x3/\x3\x2\x2\x2\x3\x31\x3\x2\x2\x2\x3\x43\x3\x2\x2\x2"+
		"\x3\x45\x3\x2\x2\x2\x3G\x3\x2\x2\x2\x3I\x3\x2\x2\x2\x3K\x3\x2\x2\x2\x3"+
		"M\x3\x2\x2\x2\x3O\x3\x2\x2\x2\x3Q\x3\x2\x2\x2\x3S\x3\x2\x2\x2\x3U\x3\x2"+
		"\x2\x2\x3W\x3\x2\x2\x2\x3Y\x3\x2\x2\x2\x3[\x3\x2\x2\x2\x3]\x3\x2\x2\x2"+
		"\x3_\x3\x2\x2\x2\x3\x61\x3\x2\x2\x2\x4\x63\x3\x2\x2\x2\x4\x65\x3\x2\x2"+
		"\x2\x5g\x3\x2\x2\x2\ai\x3\x2\x2\x2\tk\x3\x2\x2\x2\vm\x3\x2\x2\x2\rp\x3"+
		"\x2\x2\x2\xFy\x3\x2\x2\x2\x11}\x3\x2\x2\x2\x13\x88\x3\x2\x2\x2\x15\x96"+
		"\x3\x2\x2\x2\x17\x98\x3\x2\x2\x2\x19\x9C\x3\x2\x2\x2\x1B\xAA\x3\x2\x2"+
		"\x2\x1D\xB1\x3\x2\x2\x2\x1F\xBA\x3\x2\x2\x2!\xBF\x3\x2\x2\x2#\xC5\x3\x2"+
		"\x2\x2%\xD0\x3\x2\x2\x2\'\xDE\x3\x2\x2\x2)\xE0\x3\x2\x2\x2+\xE4\x3\x2"+
		"\x2\x2-\xE6\x3\x2\x2\x2/\xE8\x3\x2\x2\x2\x31\xEA\x3\x2\x2\x2\x33\xEE\x3"+
		"\x2\x2\x2\x35\xF0\x3\x2\x2\x2\x37\xF2\x3\x2\x2\x2\x39\xF4\x3\x2\x2\x2"+
		";\xF6\x3\x2\x2\x2=\xF8\x3\x2\x2\x2?\xFA\x3\x2\x2\x2\x41\xFC\x3\x2\x2\x2"+
		"\x43\xFE\x3\x2\x2\x2\x45\x101\x3\x2\x2\x2G\x106\x3\x2\x2\x2I\x10A\x3\x2"+
		"\x2\x2K\x10D\x3\x2\x2\x2M\x112\x3\x2\x2\x2O\x119\x3\x2\x2\x2Q\x11E\x3"+
		"\x2\x2\x2S\x123\x3\x2\x2\x2U\x128\x3\x2\x2\x2W\x12F\x3\x2\x2\x2Y\x13E"+
		"\x3\x2\x2\x2[\x148\x3\x2\x2\x2]\x153\x3\x2\x2\x2_\x159\x3\x2\x2\x2\x61"+
		"\x15B\x3\x2\x2\x2\x63\x15E\x3\x2\x2\x2\x65\x162\x3\x2\x2\x2gh\t\x2\x2"+
		"\x2h\x6\x3\x2\x2\x2ij\t\x3\x2\x2j\b\x3\x2\x2\x2kl\t\x4\x2\x2l\n\x3\x2"+
		"\x2\x2mn\a%\x2\x2n\f\x3\x2\x2\x2oq\t\x5\x2\x2po\x3\x2\x2\x2qr\x3\x2\x2"+
		"\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2st\x3\x2\x2\x2tu\b\x6\x2\x2u\xE\x3\x2\x2"+
		"\x2vz\t\x6\x2\x2wx\a\xF\x2\x2xz\a\f\x2\x2yv\x3\x2\x2\x2yw\x3\x2\x2\x2"+
		"z{\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|\x10\x3\x2\x2\x2}~\a\x31\x2"+
		"\x2~\x7F\a\x31\x2\x2\x7F\x83\x3\x2\x2\x2\x80\x82\n\x6\x2\x2\x81\x80\x3"+
		"\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2"+
		"\x84\x86\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x86\x87\b\b\x3\x2\x87\x12\x3"+
		"\x2\x2\x2\x88\x89\a\x31\x2\x2\x89\x8A\a,\x2\x2\x8A\x8E\x3\x2\x2\x2\x8B"+
		"\x8D\v\x2\x2\x2\x8C\x8B\x3\x2\x2\x2\x8D\x90\x3\x2\x2\x2\x8E\x8F\x3\x2"+
		"\x2\x2\x8E\x8C\x3\x2\x2\x2\x8F\x91\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x91"+
		"\x92\a,\x2\x2\x92\x93\a\x31\x2\x2\x93\x94\x3\x2\x2\x2\x94\x95\b\t\x3\x2"+
		"\x95\x14\x3\x2\x2\x2\x96\x97\x5\v\x5\x2\x97\x16\x3\x2\x2\x2\x98\x99\a"+
		"}\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9B\b\v\x4\x2\x9B\x18\x3\x2\x2\x2\x9C"+
		"\x9D\a\x42\x2\x2\x9D\x9E\ak\x2\x2\x9E\x9F\ap\x2\x2\x9F\xA0\a\x65\x2\x2"+
		"\xA0\xA1\an\x2\x2\xA1\xA2\aw\x2\x2\xA2\xA3\a\x66\x2\x2\xA3\xA4\ag\x2\x2"+
		"\xA4\xA5\x3\x2\x2\x2\xA5\xA6\b\f\x4\x2\xA6\x1A\x3\x2\x2\x2\xA7\xAB\n\a"+
		"\x2\x2\xA8\xA9\a\x31\x2\x2\xA9\xAB\n\b\x2\x2\xAA\xA7\x3\x2\x2\x2\xAA\xA8"+
		"\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2"+
		"\x2\xAD\x1C\x3\x2\x2\x2\xAE\xB2\t\x6\x2\x2\xAF\xB0\a\xF\x2\x2\xB0\xB2"+
		"\a\f\x2\x2\xB1\xAE\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2"+
		"\xB3\xB4\x6\xE\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\b\xE\x5\x2\xB6\x1E\x3"+
		"\x2\x2\x2\xB7\xBB\t\x6\x2\x2\xB8\xB9\a\xF\x2\x2\xB9\xBB\a\f\x2\x2\xBA"+
		"\xB7\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\n\t\x2"+
		"\x2\xBD \x3\x2\x2\x2\xBE\xC0\t\x5\x2\x2\xBF\xBE\x3\x2\x2\x2\xC0\xC1\x3"+
		"\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2"+
		"\xC3\xC4\b\x10\x2\x2\xC4\"\x3\x2\x2\x2\xC5\xC6\a\x31\x2\x2\xC6\xC7\a\x31"+
		"\x2\x2\xC7\xCB\x3\x2\x2\x2\xC8\xCA\n\x6\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA"+
		"\xCD\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCE\x3\x2"+
		"\x2\x2\xCD\xCB\x3\x2\x2\x2\xCE\xCF\b\x11\x3\x2\xCF$\x3\x2\x2\x2\xD0\xD1"+
		"\a\x31\x2\x2\xD1\xD2\a,\x2\x2\xD2\xD6\x3\x2\x2\x2\xD3\xD5\v\x2\x2\x2\xD4"+
		"\xD3\x3\x2\x2\x2\xD5\xD8\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD6\xD4\x3\x2"+
		"\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD9\xDA\a,\x2\x2\xDA\xDB"+
		"\a\x31\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDD\b\x12\x3\x2\xDD&\x3\x2\x2\x2"+
		"\xDE\xDF\a<\x2\x2\xDF(\x3\x2\x2\x2\xE0\xE1\a]\x2\x2\xE1\xE2\x3\x2\x2\x2"+
		"\xE2\xE3\b\x14\x6\x2\xE3*\x3\x2\x2\x2\xE4\xE5\a*\x2\x2\xE5,\x3\x2\x2\x2"+
		"\xE6\xE7\a+\x2\x2\xE7.\x3\x2\x2\x2\xE8\xE9\a.\x2\x2\xE9\x30\x3\x2\x2\x2"+
		"\xEA\xEB\a\x7F\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xED\b\x18\x5\x2\xED\x32\x3"+
		"\x2\x2\x2\xEE\xEF\t\n\x2\x2\xEF\x34\x3\x2\x2\x2\xF0\xF1\t\v\x2\x2\xF1"+
		"\x36\x3\x2\x2\x2\xF2\xF3\t\f\x2\x2\xF3\x38\x3\x2\x2\x2\xF4\xF5\t\r\x2"+
		"\x2\xF5:\x3\x2\x2\x2\xF6\xF7\t\xE\x2\x2\xF7<\x3\x2\x2\x2\xF8\xF9\t\xF"+
		"\x2\x2\xF9>\x3\x2\x2\x2\xFA\xFB\t\x10\x2\x2\xFB@\x3\x2\x2\x2\xFC\xFD\t"+
		"\x11\x2\x2\xFD\x42\x3\x2\x2\x2\xFE\xFF\ak\x2\x2\xFF\x100\ah\x2\x2\x100"+
		"\x44\x3\x2\x2\x2\x101\x102\ag\x2\x2\x102\x103\an\x2\x2\x103\x104\au\x2"+
		"\x2\x104\x105\ag\x2\x2\x105\x46\x3\x2\x2\x2\x106\x107\ag\x2\x2\x107\x108"+
		"\ap\x2\x2\x108\x109\a\x66\x2\x2\x109H\x3\x2\x2\x2\x10A\x10B\ai\x2\x2\x10B"+
		"\x10C\aq\x2\x2\x10CJ\x3\x2\x2\x2\x10D\x10E\ao\x2\x2\x10E\x10F\ag\x2\x2"+
		"\x10F\x110\ap\x2\x2\x110\x111\aw\x2\x2\x111L\x3\x2\x2\x2\x112\x113\aq"+
		"\x2\x2\x113\x114\ar\x2\x2\x114\x115\av\x2\x2\x115\x116\ak\x2\x2\x116\x117"+
		"\aq\x2\x2\x117\x118\ap\x2\x2\x118N\x3\x2\x2\x2\x119\x11A\ar\x2\x2\x11A"+
		"\x11B\ak\x2\x2\x11B\x11C\a\x65\x2\x2\x11C\x11D\am\x2\x2\x11DP\x3\x2\x2"+
		"\x2\x11E\x11F\av\x2\x2\x11F\x120\aj\x2\x2\x120\x121\ak\x2\x2\x121\x122"+
		"\au\x2\x2\x122R\x3\x2\x2\x2\x123\x124\x5\x33\x19\x2\x124\x125\x5\x35\x1A"+
		"\x2\x125\x126\x5\x37\x1B\x2\x126\x127\x5\x39\x1C\x2\x127T\x3\x2\x2\x2"+
		"\x128\x129\x5;\x1D\x2\x129\x12A\x5=\x1E\x2\x12A\x12B\x5?\x1F\x2\x12B\x12C"+
		"\x5\x41 \x2\x12C\x12D\x5\x39\x1C\x2\x12DV\x3\x2\x2\x2\x12E\x130\x5\t\x4"+
		"\x2\x12F\x12E\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2"+
		"\x131\x132\x3\x2\x2\x2\x132\x139\x3\x2\x2\x2\x133\x135\t\x12\x2\x2\x134"+
		"\x136\x5\t\x4\x2\x135\x134\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x135"+
		"\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x13A\x3\x2\x2\x2\x139\x133\x3"+
		"\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13AX\x3\x2\x2\x2\x13B\x13F\x5\x5\x2\x2"+
		"\x13C\x13F\x5\a\x3\x2\x13D\x13F\a\x61\x2\x2\x13E\x13B\x3\x2\x2\x2\x13E"+
		"\x13C\x3\x2\x2\x2\x13E\x13D\x3\x2\x2\x2\x13F\x144\x3\x2\x2\x2\x140\x145"+
		"\x5\x5\x2\x2\x141\x145\x5\a\x3\x2\x142\x145\a\x61\x2\x2\x143\x145\x5\t"+
		"\x4\x2\x144\x140\x3\x2\x2\x2\x144\x141\x3\x2\x2\x2\x144\x142\x3\x2\x2"+
		"\x2\x144\x143\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2"+
		"\x146\x147\x3\x2\x2\x2\x147Z\x3\x2\x2\x2\x148\x149\a?\x2\x2\x149\\\x3"+
		"\x2\x2\x2\x14A\x14B\a?\x2\x2\x14B\x154\a?\x2\x2\x14C\x14D\a#\x2\x2\x14D"+
		"\x154\a?\x2\x2\x14E\x154\t\x13\x2\x2\x14F\x150\a@\x2\x2\x150\x154\a?\x2"+
		"\x2\x151\x152\a>\x2\x2\x152\x154\a?\x2\x2\x153\x14A\x3\x2\x2\x2\x153\x14C"+
		"\x3\x2\x2\x2\x153\x14E\x3\x2\x2\x2\x153\x14F\x3\x2\x2\x2\x153\x151\x3"+
		"\x2\x2\x2\x154^\x3\x2\x2\x2\x155\x15A\a,\x2\x2\x156\x157\a\x31\x2\x2\x157"+
		"\x158\x6/\x3\x2\x158\x15A\x6/\x4\x2\x159\x155\x3\x2\x2\x2\x159\x156\x3"+
		"\x2\x2\x2\x15A`\x3\x2\x2\x2\x15B\x15C\t\x14\x2\x2\x15C\x62\x3\x2\x2\x2"+
		"\x15D\x15F\n\x15\x2\x2\x15E\x15D\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160"+
		"\x15E\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x64\x3\x2\x2\x2\x162\x163"+
		"\a_\x2\x2\x163\x164\x3\x2\x2\x2\x164\x165\b\x32\x5\x2\x165\x66\x3\x2\x2"+
		"\x2\x1A\x2\x3\x4ry{\x83\x8E\xAA\xAC\xB1\xBA\xC1\xCB\xD6\x131\x137\x139"+
		"\x13E\x144\x146\x153\x159\x160\a\b\x2\x2\x2\x3\x2\a\x3\x2\x6\x2\x2\a\x4"+
		"\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MurMur.Grammar
